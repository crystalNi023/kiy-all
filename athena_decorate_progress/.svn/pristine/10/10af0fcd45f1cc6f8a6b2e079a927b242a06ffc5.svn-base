<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"     "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dec.pro.mapper.company.PunchRecordMapper">
	<insert id="add" parameterType="com.dec.pro.entity.company.PunchRecord">
		INSERT INTO punch_record
		<set>
			<if test="id != null">
				`id`=#{id},
			</if>
			<if test="constructorId != null">
				`constructor_id`=#{constructorId},
			</if>
			<if test="workToday != null">
				`work_today`=#{workToday},
			</if>
			<if test="declarationPlace != null">
				`declaration_place`=#{declarationPlace},
			</if>
			<if test="realPlace != null">
				`real_place`=#{realPlace},
			</if>
			<if test="offDeclarationPlace != null">
				`off_declaration_place`=#{offDeclarationPlace},
			</if>
			<if test="offRealPlace != null">
				`off_real_place`=#{offRealPlace},
			</if>
			<if test="workingTime != null">
				`working_time`=#{workingTime},
			</if>
			<if test="offWorkTime != null">
				`off_work_time`=#{offWorkTime},
			</if>
			<if test="remark != null">
				`remark`=#{remark},
			</if>
			<if test="created != null">
				`created`=#{created},
			</if>
			<if test="updated != null">
				`updated`=#{updated},
			</if>
		</set>
	</insert>
	<select id="getOne"  resultType="com.dec.pro.entity.company.PunchRecord">
		SELECT  
			id        as 'id' ,
			constructor_id  	  as 'constructorId' ,
			job_type_id  	  as 'jobTypeId' ,
			(SELECT `work_tasks` FROM job_type WHERE id = punch_record.job_type_id)  	  as 'workTasks' ,
			pos_id  	  as 'posId' ,
			declaration_place  	  as 'declarationPlace' ,
			real_place  	  as 'realPlace' ,
			off_declaration_place  	  as 'offDeclarationPlace' ,
			off_real_place  	  as 'offRealPlace' ,
			working_time  	  as 'workingTime' ,
			off_work_time  	  as 'offWorkTime' ,
			remark    as 'remark' ,
			created   as 'created' ,
			updated   as 'updated' 
		FROM punch_record
		WHERE `id`=#{id}
	</select>
	<select id="getOnePunchRecord"  resultType="com.dec.pro.entity.company.PunchRecord">
		SELECT  
			id        as 'id' ,
			constructor_id  	  as 'constructorId' ,
			work_today			  as 'workToday',
			declaration_place  	  as 'declarationPlace' ,
			real_place  	  as 'realPlace' ,
			off_declaration_place  	  as 'offDeclarationPlace' ,
			off_real_place  	  as 'offRealPlace' ,
			working_time  	  as 'workingTime' ,
			off_work_time  	  as 'offWorkTime' ,
			remark    as 'remark' ,
			created   as 'created' ,
			updated   as 'updated' 
		FROM punch_record
		WHERE `constructor_id`=#{constructorId} 
		 AND date_format(`created`,'%Y-%m-%d')=date_format(#{date},'%Y-%m-%d')
	</select>
	<select id="getPunchRecordPeriodByConstructorId"  resultType="com.dec.pro.entity.company.PunchRecord">
		SELECT  
			punch_record.id        as 'id' ,
			constructor_id  	  as 'constructorId' ,
			decoration_team.name	  as 'constructorName',
			decoration_team.phone as 'constructorPhone' ,
			work_today			  as 'workToday',
			declaration_place  	  as 'declarationPlace' ,
			real_place  	  as 'realPlace' ,
			off_declaration_place  	  as 'offDeclarationPlace' ,
			off_real_place  	  as 'offRealPlace' ,
			working_time  	  as 'workingTime' ,
			off_work_time  	  as 'offWorkTime' ,
			punch_record.remark    as 'remark' ,
			punch_record.created   as 'created' ,
			punch_record.updated   as 'updated' 
		FROM punch_record
		LEFT JOIN decoration_team ON user_id=constructor_id
		WHERE `constructor_id`=#{constructorId} 
		AND date_format(punch_record.`created`,'%Y-%m-%d') BETWEEN date_format(#{startDate},'%Y-%m-%d')
		AND date_format(#{endDate},'%Y-%m-%d')
		ORDER BY punch_record.created ASC
	</select>
	<select id="getListStaffPunchRecord"  resultType="com.dec.pro.entity.company.PunchRecord">
		SELECT  
			PR.id        as 'id' ,
			PR.constructor_id  	  as 'constructorId' ,
			PR.job_type_id  	  as 'jobTypeId' ,
			(SELECT `work_tasks` FROM job_type WHERE id = PR.job_type_id)  	  as 'workTasks' ,
			PR.pos_id  	  as 'posId' ,
			PR.declaration_place  	  as 'declarationPlace' ,
			PR.real_place  	  as 'realPlace' ,
			PR.off_declaration_place  	  as 'offDeclarationPlace' ,
			PR.off_real_place  	  as 'offRealPlace' ,
			PR.working_time  	  as 'workingTime' ,
			PR.off_work_time  	  as 'offWorkTime' ,
			S.`name`    as 'name',
            S.`head_portrait` as  'headPortrait'
		FROM punch_record PR
        JOIN staff S ON S.`id`=PR.`constructor_id`
		WHERE S.`gro_id`=#{groId}
		 AND date_format(PR.`created`,'%Y-%m-%d')=date_format(#{date},'%Y-%m-%d')
	</select>
	<select id="getList" parameterType="java.util.Map" resultType="com.dec.pro.entity.company.PunchRecord">
		SELECT  
			id        as 'id' ,
			constructor_id  	  as 'constructorId' ,
			job_type_id  	  as 'jobTypeId' ,
			(SELECT `work_tasks` FROM job_type WHERE id = punch_record.job_type_id)  	  as 'workTasks' ,
			pos_id  	  as 'posId' ,
			declaration_place  	  as 'declarationPlace' ,
			real_place  	  as 'realPlace' ,
			off_declaration_place  	  as 'offDeclarationPlace' ,
			off_real_place  	  as 'offRealPlace' ,
			working_time  	  as 'workingTime' ,
			off_work_time  	  as 'offWorkTime' ,
			remark    as 'remark' ,
			created   as 'created' ,
			updated   as 'updated' 
		FROM punch_record
		<include refid="searchCondition"></include>
		LIMIT #{startRow},#{pageSize}
	</select>
	<select id="getListByCompany" parameterType="java.util.Map" resultType="com.dec.pro.entity.company.PunchRecord">
		SELECT 
			T2.id        as 'id' ,
			T1.user_id  	  as 'constructorId' ,
			T1.name as 'constructorName', 
			T2.declaration_place  	  as 'declarationPlace' ,
			T2.real_place  	  as 'realPlace' ,
			T2.off_declaration_place  	  as 'offDeclarationPlace' ,
			T2.off_real_place  	  as 'offRealPlace' ,
			T2.working_time  	  as 'workingTime' ,
			T2.off_work_time  	  as 'offWorkTime' ,
			T2.remark    as 'remark' ,
			T2.created   as 'created' ,
			T2.updated   as 'updated' ,
			case when T2.working_time is NULL then 0 ELSE 1 END as 'status'
		FROM (SELECT * FROM decoration_team  D WHERE D.module=5 AND com_id=#{companyId} AND user_id IS NOT NULL) T1
		LEFT JOIN (SELECT * FROM punch_record  P WHERE date_format(P.`created`,'%Y-%m-%d')=date_format(#{date},'%Y-%m-%d')) T2
		on T1.user_id=T2.constructor_id 
	</select>
	<select id="getStatusListByCompany" parameterType="java.util.Map" resultType="com.dec.pro.entity.company.PunchRecord">
				SELECT 
			T2.id        as 'id' ,
			T1.user_id  	  as 'constructorId' ,
			T1.name as 'constructorName', 
			T2.declaration_place  	  as 'declarationPlace' ,
			T2.real_place  	  as 'realPlace' ,
			T2.off_declaration_place  	  as 'offDeclarationPlace' ,
			T2.off_real_place  	  as 'offRealPlace' ,
			T2.working_time  	  as 'workingTime' ,
			T2.off_work_time  	  as 'offWorkTime' ,
			T2.remark    as 'remark' ,
			T2.created   as 'created' ,
			T2.updated   as 'updated' ,
			case when T2.working_time is NULL then 0 ELSE 1 END as 'status'
 		FROM (SELECT * FROM decoration_team  D WHERE D.module=5 AND com_id=#{companyId} AND user_id IS NOT NULL) T1
		LEFT JOIN (SELECT * FROM punch_record  P WHERE date_format(P.`created`,'%Y-%m-%d')=date_format(#{date},'%Y-%m-%d')) T2
		on T1.user_id=T2.constructor_id 
		GROUP BY T1.user_id
		HAVING status=#{status}
	</select>
	<select id="getListByCompanyManager" parameterType="java.util.Map" resultType="com.dec.pro.entity.company.PunchRecord">
				SELECT 
			T2.id        as 'id' ,
			T1.user_id  	  as 'constructorId' ,
			T1.name as 'constructorName', 
			T2.declaration_place  	  as 'declarationPlace' ,
			T2.real_place  	  as 'realPlace' ,
			T2.off_declaration_place  	  as 'offDeclarationPlace' ,
			T2.off_real_place  	  as 'offRealPlace' ,
			T2.working_time  	  as 'workingTime' ,
			T2.off_work_time  	  as 'offWorkTime' ,
			T2.remark    as 'remark' ,
			T2.created   as 'created' ,
			T2.updated   as 'updated' ,
			case when T2.working_time is NULL then 0 ELSE 1 END as 'status'
		FROM (SELECT * FROM decoration_team D WHERE com_id=#{companyId} AND D.id in 
			 (SELECT table1.tec_id FROM (SELECT project_tecoration.* FROM project_tecoration 
				WHERE tec_id in (SELECT id FROM decoration_team  WHERE module=5)) table1 JOIN 
			(SELECT project_tecoration.* FROM project_tecoration WHERE tec_id=(SELECT id FROM decoration_team 
				WHERE user_id=#{userId})) table2 ON table1.pro_id = table2.pro_id)) T1
		LEFT JOIN (SELECT * FROM punch_record  P WHERE date_format(P.`created`,'%Y-%m-%d')=date_format(#{date},'%Y-%m-%d')) T2
			on T1.user_id=T2.constructor_id 
			GROUP BY T1.user_id
	</select>
	<select id="getStatusListByCompanyManager" parameterType="java.util.Map" resultType="com.dec.pro.entity.company.PunchRecord">
		SELECT 
			T2.id        as 'id' ,
			T1.user_id  	  as 'constructorId' ,
			T1.name as 'constructorName', 
			T2.declaration_place  	  as 'declarationPlace' ,
			T2.real_place  	  as 'realPlace' ,
			T2.off_declaration_place  	  as 'offDeclarationPlace' ,
			T2.off_real_place  	  as 'offRealPlace' ,
			T2.working_time  	  as 'workingTime' ,
			T2.off_work_time  	  as 'offWorkTime' ,
			T2.remark    as 'remark' ,
			T2.created   as 'created' ,
			T2.updated   as 'updated' ,
			case when T2.working_time is NULL then 0 ELSE 1 END as 'status'
		FROM (SELECT * FROM decoration_team D WHERE com_id=#{companyId} AND D.id in 
			 (SELECT table1.tec_id FROM (SELECT project_tecoration.* FROM project_tecoration 
				WHERE tec_id in (SELECT id FROM decoration_team  WHERE module=5)) table1 JOIN 
			(SELECT project_tecoration.* FROM project_tecoration WHERE tec_id=(SELECT id FROM decoration_team 
				WHERE user_id=#{userId})) table2 ON table1.pro_id = table2.pro_id)) T1
		LEFT JOIN (SELECT * FROM punch_record  P WHERE date_format(P.`created`,'%Y-%m-%d')=date_format(#{date},'%Y-%m-%d')) T2
			on T1.user_id=T2.constructor_id 
			GROUP BY T1.user_id
			HAVING status=#{status}
	</select>
	<select id="getCount" parameterType="java.util.Map" resultType="int">
		SELECT COUNT(*) FROM  punch_record
		<include refid="searchCondition"></include>
	</select>
	<sql id="searchCondition">
		<where>
				1=1
			<if test="constructorId != null">
				AND constructor_id = #{constructorId}
			</if>
		</where>
	</sql>
	<!-- 调用需要日志记录 -->
	<delete id="delete">
		DELETE FROM punch_record WHERE `id`=#{id}
	</delete>
	<update id="update" parameterType="com.dec.pro.entity.company.PunchRecord">
		UPDATE punch_record 
		<set>    
			<if test="workToday != null">
				 work_today=#{workToday},
			</if>
			<if test="workingTime != null">
				 working_time=#{workingTime},
			</if>
			<if test="declarationPlace != null">
				 declaration_place=#{declarationPlace},
			</if>
			<if test="realPlace != null">
				 real_place=#{realPlace},
			</if>
			<if test="offWorkTime != null">
				 off_work_time=#{offWorkTime},
			</if>
			<if test="offDeclarationPlace != null">
				 off_declaration_place=#{offDeclarationPlace},
			</if>
			<if test="offRealPlace != null">
				 off_real_place=#{offRealPlace},
			</if>
		</set>
		WHERE id=#{id}
	</update>
</mapper>