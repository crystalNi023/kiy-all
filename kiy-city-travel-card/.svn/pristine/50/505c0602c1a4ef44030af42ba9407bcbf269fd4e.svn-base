package com.kiy.view;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CLabel;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Dialog;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;

import org.eclipse.wb.swt.SWTResourceManager;

/**
 * @author Simon(ZhangXi TEL:13883833982)
 *
 */
public class FPrompt extends Dialog {

	public static final int CLOSE = 0;
	public static final int CANCEL = 0;
	public static final int RETRY = 1;
	public static final int OK = 1;

	private int time = -1;
	private int result = 0;
	private Shell shell;
	private Button buttonClose;
	private Button buttonRetry;
	private CLabel labelImage;
	private Label labelText;
	private Button buttonCancel;
	private Button buttonAccept;

	/**
	 * 显示错误提示框(按钮:close,retry)
	 * 
	 * @param parent
	 * @param ex
	 * @return
	 */
	public static int showError(Shell parent, Exception ex) {
		if (Display.getCurrent() == null) {
			FPromptRunnable r = new FPromptRunnable() {
				@Override
				public void run() {
					result = showError(parent, ex);
				}
			};
			Display.getDefault().syncExec(r);
			return r.result;
		}

		FPrompt f = new FPrompt(parent);
		f.makeError(ex);
		return f.open();
	}

	/**
	 * 显示消息提示框(按钮:cancel,ok)
	 * 
	 * @param parent
	 * @param text
	 * @return
	 */
	public static int showInformation(Shell parent, String text) {
		if (Display.getCurrent() == null) {
			FPromptRunnable r = new FPromptRunnable() {
				@Override
				public void run() {
					result = showInformation(parent, text);
				}
			};
			Display.getDefault().syncExec(r);
			return r.result;
		}

		FPrompt f = new FPrompt(parent);
		f.makeInformation(text);
		return f.open();
	}

	/**
	 * 显示消息提示框(按钮:ok)
	 * 
	 * @param parent
	 * @param text
	 * @return
	 */
	public static int showPrompt(Shell parent, String text) {
		if (Display.getCurrent() == null) {
			FPromptRunnable r = new FPromptRunnable() {
				@Override
				public void run() {
					result = showPrompt(parent, text);
				}
			};
			Display.getDefault().syncExec(r);
			return r.result;
		}

		FPrompt f = new FPrompt(parent);
		f.makePrompt(text);
		return f.open();
	}

	/**
	 * 显示警告提示框(按钮:cancel,ok)
	 * 
	 * @param parent
	 * @param text
	 * @return
	 */
	public static int showAlarm(Shell parent, String text) {
		if (Display.getCurrent() == null) {
			FPromptRunnable r = new FPromptRunnable() {
				@Override
				public void run() {
					result = showAlarm(parent, text);
				}
			};
			Display.getDefault().syncExec(r);
			return r.result;
		}

		FPrompt f = new FPrompt(parent);
		f.makeAlarm(text);
		return f.open();
	}

	/**
	 * 显示成功提示框(按钮:close)
	 * 
	 * @param parent
	 * @param text
	 * @return
	 */
	public static int showSuccess(Shell parent, String text) {
		if (Display.getCurrent() == null) {
			FPromptRunnable r = new FPromptRunnable() {
				@Override
				public void run() {
					result = showSuccess(parent, text);
				}
			};
			Display.getDefault().syncExec(r);
			return r.result;
		}

		FPrompt f = new FPrompt(parent);
		f.makeSuccess(text);
		return f.open();
	}

	/**
	 * Create the dialog.
	 * 
	 * @param parent
	 * @param style
	 */
	public FPrompt(Shell parent) {
		super(parent, SWT.NONE);
		createContents();
	}

	/**
	 * Open the dialog.
	 * 
	 * @return the result
	 */
	public int open() {
		shell.open();
		shell.layout();
		Display display = getParent().getDisplay();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) {
				display.sleep();
			}
			if (!shell.isDisposed()) {
				if (time > 0) {
					time--;
					buttonClose.setText("关闭(" + time / 100 + ")");
				} else if (time == 0) {
					shell.close();
				}
			}
		}
		return result;
	}

	/**
	 * Create contents of the dialog.
	 */
	private void createContents() {
		shell = new Shell(getParent(), SWT.BORDER | SWT.CLOSE | SWT.SYSTEM_MODAL);
		shell.setSize(480, 194);

		buttonClose = new Button(shell, SWT.NONE);
		buttonClose.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				result = CLOSE;
				shell.close();
			}
		});
		buttonClose.setBounds(378, 130, 80, 27);
		buttonClose.setText("关闭");

		buttonRetry = new Button(shell, SWT.NONE);
		buttonRetry.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				result = RETRY;
				shell.close();
			}
		});
		buttonRetry.setBounds(290, 130, 80, 27);
		buttonRetry.setText("重试");

		labelImage = new CLabel(shell, SWT.NONE);
		labelImage.setTopMargin(0);
		labelImage.setRightMargin(0);
		labelImage.setLeftMargin(0);
		labelImage.setBottomMargin(0);
		labelImage.setImage(SWTResourceManager.getImage(FPrompt.class, "/com/kiy/sts/resources/alarm.png"));
		labelImage.setBounds(16, 16, 32, 32);
		labelImage.setText("");

		labelText = new Label(shell, SWT.WRAP);
		labelText.setBounds(56, 16, 402, 96);

		Label label = new Label(shell, SWT.SEPARATOR | SWT.HORIZONTAL);
		label.setBounds(0, 120, 474, 2);

		buttonCancel = new Button(shell, SWT.NONE);
		buttonCancel.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				result = CANCEL;
				shell.close();
			}
		});
		buttonCancel.setBounds(378, 130, 80, 27);
		buttonCancel.setText("取消");

		buttonAccept = new Button(shell, SWT.NONE);
		buttonAccept.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				result = OK;
				shell.close();
			}
		});
		buttonAccept.setBounds(290, 130, 80, 27);
		buttonAccept.setText("确定");

		F.parentCenter(getParent(), shell);
	}

	private void makeError(Exception e) {
		if (e == null)
			throw new NullPointerException("参数不能为空");

		shell.setText("错误");
		labelImage.setImage(SWTResourceManager.getImage(FPrompt.class, "/com/kiy/resources/error.png"));
		
		labelText.setText("程序错误，" + e.getMessage());
		

		buttonClose.setVisible(true);
		buttonRetry.setVisible(true);
		buttonCancel.setVisible(false);
		buttonAccept.setVisible(false);
	}

	private void makeAlarm(String text) {
		if (text == null | text.isEmpty())
			return;

		shell.setText("警告");
		labelText.setText(text);
		labelImage.setImage(SWTResourceManager.getImage(FPrompt.class, "/com/kiy/sts/resources/alarm.png"));
		buttonClose.setVisible(false);
		buttonRetry.setVisible(false);
		buttonCancel.setVisible(true);
		buttonAccept.setVisible(true);
	}

	private void makeInformation(String text) {
		if (text == null | text.isEmpty())
			return;

		shell.setText("信息");
		labelText.setText(text);
		labelImage.setImage(SWTResourceManager.getImage(FPrompt.class, "/com/kiy/sts/resources/alarm.png"));
		buttonClose.setVisible(false);
		buttonRetry.setVisible(false);
		buttonCancel.setVisible(true);
		buttonAccept.setVisible(true);
	}

	private void makePrompt(String text) {
		if (text == null | text.isEmpty())
			return;

		shell.setText("信息");
		labelText.setText(text);
		labelImage.setImage(SWTResourceManager.getImage(FPrompt.class, "/com/kiy/sts/resources/alarm.png"));
		buttonClose.setVisible(true);
		buttonRetry.setVisible(false);
		buttonCancel.setVisible(false);
		buttonAccept.setVisible(false);
	}

	private void makeSuccess(String text) {
		if (text == null | text.isEmpty())
			return;

		shell.setText("提示");
		labelText.setText(text);
		labelImage.setImage(SWTResourceManager.getImage(FPrompt.class, "/com/kiy/sts/resources/success.png"));
		buttonClose.setVisible(true);
		buttonRetry.setVisible(false);
		buttonCancel.setVisible(false);
		buttonAccept.setVisible(false);
		time = 300;
	}
}