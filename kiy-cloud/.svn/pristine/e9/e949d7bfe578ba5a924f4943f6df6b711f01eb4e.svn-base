/**
 * 2017年2月16日
 */
package com.kiy.cloud.data;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.kiy.cloud.Config;
import com.kiy.cloud.Log;
import com.kiy.cloud.http.User;

/**
 * 数据主类
 * 
 * @author Simon(ZhangXi TEL:13883833982)
 *
 */
public final class Data {

	private Data() {
		// 对象只能有一个实例
	}

	public static void initialize() {
		Log.info("Data initialize ...");

		if (Config.DB) {
			try {
				Class.forName("com.mysql.jdbc.Driver");
			} catch (ClassNotFoundException ex) {
				Log.error(ex);
				throw new RuntimeException("MySql Deiver not found", ex);
			}
		}

		Log.info("Data initialized");
	}

	public static void destroy() {
		Log.info("Data destroy ...");

		Log.info("Data destroyed");
	}

	// 以下为数据处理方法///////////////////////////

	private static Connection getConnection() {
		try {
			return DriverManager.getConnection(Config.DB_URL, Config.DB_USER,
					Config.DB_PASSWORD);
		} catch (SQLException e) {
			Log.error(e);
		}
		return null;
	}

	/**
	 * 检查伺服器KEY是否存在,并返回所属公司的KEY
	 * 
	 * @param key
	 *            伺服器KEY
	 * @return Company Key / null
	 */
	public static String checkServoKey(String key) {
		if (key == null || key.length() == 0)
			return null;

		Connection connection = getConnection();
		if (connection == null)
			return null;

		try (PreparedStatement statement = connection
				.prepareStatement("SELECT `customer_id` FROM `servos` WHERE `id`=?")) {
			statement.setString(1, key);
			ResultSet rs = statement.executeQuery();
			if (rs.next())
				return rs.getString(1);
		} catch (SQLException ex) {
			Log.error(ex);
		} finally {
			try {
				connection.close();
			} catch (SQLException ex) {
				Log.error(ex);
			}
		}
		return null;
	}

	/**
	 * 通过登陆的手机号与服务器类型获取登陆本地用户名(0)与本地服务器id(1)
	 * 
	 * @param phoneNumber
	 * @param servoType
	 * @return String[0]->本地用户名 String[1]->本地服务器id(1)
	 */
	public static String[] getLoginServoAndUser(String phoneNumber,
			int servoType) {
		if (phoneNumber == null || phoneNumber.length() == 0)
			return null;

		Connection connection = getConnection();
		if (connection == null)
			return null;

		String[] result = new String[3];
		String sql = "SELECT `user`,`servo_id`,`user_id` FROM `users` RIGHT OUTER JOIN `servos` ON `users`.`servo_id`=`servos`.`id` WHERE `phone`=? AND `servos`.`type`=?";
		PreparedStatement statement = null;
		ResultSet rs = null;

		try {
			statement = connection.prepareStatement(sql);
			statement.setString(1, phoneNumber);
			statement.setInt(2, servoType);

			rs = statement.executeQuery();
			while (rs.next()) {
				result[0] = rs.getString(1);
				result[1] = rs.getString(2);
				result[2] = rs.getString(3);
			}

			return result;
		} catch (SQLException e) {
			Log.error(e);
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (rs != null) {
					rs.close();
				}
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException ex) {
				Log.error(ex);
			}
		}

		return null;
	}
	
	/**
	 * 检测该手机号是否已绑定相应的服务器
	 * @param phone
	 * @param servoId
	 * @return 0-SUSCESS 1-EXIST 2-BAD_PARAMETER 3-SERVO_ERROR
	 */
	public static int checkUser(String phone,Integer servoType){
		if (phone == null || phone.length() == 0)
			return 2;
		if (servoType == null )
			return 2;
	
		String sql = "SELECT count(*) AS `count` FROM `users` u RIGHT OUTER JOIN `servos` s ON u.`servo_id`=s.`id` WHERE u.`phone`=? AND s.`type`=?";
		
		PreparedStatement statement = null;
		ResultSet rs = null;
		
		Connection connection = getConnection();
		if (connection == null)
			return 3;
		
		try {
			statement = connection.prepareStatement(sql);
			statement.setString(1, phone);
			statement.setInt(2, servoType);

			rs = statement.executeQuery();
			int count = 0;
			if(rs.next()){
				count = rs.getInt(1);
			}
			if(count!=0){
				return 1;
			}else{
				return 0;
			}
		} catch (SQLException e) {
			Log.error(e);
			return 3;
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (connection != null) {
					connection.close();
				}
			} catch (SQLException ex) {
				Log.error(ex);
			}
		}
	}
	
	public static boolean bindUser(User user){
		if(user == null)
			return false;
		
		String sql = "INSERT INTO `users` (`user_id`,`phone`,`servo_id`,`user`) VALUES (?,?,?,?)";
		PreparedStatement statement = null;
		
		Connection connection = getConnection();
		if (connection == null)
			return false;
		try {
			statement = connection.prepareStatement(sql);
			statement.setString(1, user.getId());
			statement.setString(2, user.getPhone());
			statement.setString(3, user.getServoId());
			statement.setString(4, user.getUserName());
			return statement.executeUpdate() == 1;
		} catch (SQLException e) {
			Log.error(e);
			return false;
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
				if (connection != null) {
					connection.close();
				}
			} catch (SQLException ex) {
				Log.error(ex);
			}
		}
		
	}
	
}