package com.kiy.controller;

import java.util.HashSet;
import java.util.Set;

import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Dialog;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.TreeItem;

import com.kiy.common.Device;
import com.kiy.common.Servo;
import com.kiy.common.Zone;
import com.kiy.resources.Lang;
import com.kiy.resources.Resource;

import org.eclipse.swt.custom.CLabel;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.custom.CCombo;
import com.kiy.common.Types.Kind;

public class FSelectDevice extends Dialog{
	private Tree treeDevice;
	private Set<Device> tag;
	private Shell shell;
	private Servo servo;
	
	public boolean isEnsure = false;
	private CCombo comboDeviceKind;

	public FSelectDevice(Shell parent) {
		super(parent);
	}
	
	public Set<Device> open(Servo s ,Set<Device> devices) {
		if(s==null) {
			throw new IllegalArgumentException("Servo Cannot be null!!!");
		}
		servo = s;
		tag = devices;

		createContents();
		F.center(getParent(), shell);
		
		shell.open();
		shell.layout();
		Display display = getParent().getDisplay();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}
		
		return tag;
	}
	
	private void createContents() {
		shell = new Shell(getParent(), SWT.BORDER | SWT.CLOSE);
		shell.setSize(295, 381);
		shell.setText("选择设备");
		
		CLabel lblNewLabel = new CLabel(shell, SWT.NONE);
		lblNewLabel.setBounds(16, 16, 67, 23);
		lblNewLabel.setText("设备类型：");
		
		comboDeviceKind = new CCombo(shell, SWT.BORDER);
		comboDeviceKind.setBounds(91, 18, 180, 21);
		Kind[] values = Kind.values();
		for (Kind kind : values) {
			if(kind != Kind.ADAPTER&&kind != Kind.CONCENTRATOR&&kind!=Kind.REPEATER&&kind != Kind.NONE&&kind !=Kind.OTHER) {
				comboDeviceKind.add(Lang.getString("Kind."+kind.name().toUpperCase()));
				comboDeviceKind.setData(Lang.getString("Kind."+kind.name().toUpperCase()), kind);
			}
		}
		comboDeviceKind.select(0);
		comboDeviceKind.addSelectionListener(comboDeviceKindSelectionAdapter);

		treeDevice = new Tree(shell, SWT.BORDER | SWT.CHECK);
		treeDevice.setBounds(16, 50, 256, 250);
		treeDevice.addListener(SWT.Selection, new Listener() {
			@Override
			public void handleEvent(Event event) {
				if (event.detail == SWT.CHECK) {
					TreeItem item = (TreeItem) event.item;
					boolean checked = item.getChecked();
					checkAllChildren(item.getItems(), checked);
					// 触发这个的Item的grayed = false，因为这是个CHECK事件，要么全选，要么全不选。
					checkParent(item.getParentItem(), checked, false);
				}
			}
		});
		
		
		Set<Device> rootDevices = servo.getRootDevices();
		Set<Zone> rootZones = servo.getRootZones();
		//1.根级设备
		Kind k = null;
		Object data = comboDeviceKind.getData(comboDeviceKind.getText());
		if(data!=null&&data instanceof Kind) {
			k = (Kind)data;
		}	
		
		for (Device device : rootDevices) {
				if(device.getKind() == k) {
					TreeItem item = new TreeItem(treeDevice, SWT.NONE);
					item.setText(device.getName());
					item.setData(device);
				}
		}
			
		
		//2.递归显示区域下的设备
		for (Zone zone : rootZones) {
			showDeviceForZone(treeDevice,zone);
		}

		Button btnAll = new Button(shell, SWT.NONE);
		btnAll.setBounds(16, 308, 80, 27);
		btnAll.setText(Lang.getString("FSelectDay.ButtonSelectAll.text"));
		btnAll.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				for (TreeItem item : treeDevice.getItems()) {
					item.setChecked(true);
					checkAllChildren(item.getItems(), true);
				}
			}
		});

		// 弹出框点击确认
		Button btnAccept = new Button(shell, SWT.NONE);
		btnAccept.setBounds(192, 308, 80, 27);
		btnAccept.setText(Lang.getString("Ensure.text"));
		btnAccept.addSelectionListener(btnAcceptSelectionAdapter);
		
		make();
	}
	
	private void make() {
		
		if(tag.size()>0) {
			Kind kind = tag.iterator().next().getKind();
			
			comboDeviceKind.setText(Lang.getString("Kind."+kind.name().toUpperCase()));
			
			treeDevice.removeAll();
			
			Set<Device> rootDevices = servo.getRootDevices();
			Set<Zone> rootZones = servo.getRootZones();
			//1.根级设备
			Kind k = null;
			Object data = comboDeviceKind.getData(comboDeviceKind.getText());
			if(data!=null&&data instanceof Kind) {
				k = (Kind)data;
			}	
			
			for (Device device : rootDevices) {
					if(device.getKind() == k) {
						TreeItem item = new TreeItem(treeDevice, SWT.CHECK);
						item.setText(device.getName());
						item.setData(device);
						if(tag.contains(device)) {
							item.setChecked(true);
						}
					}
			}
			
			//2.递归显示区域下的设备
			for (Zone zone : rootZones) {
				showDeviceForZoneMake(treeDevice,zone);
			}
			
//			for(TreeItem item:treeDevice.getItems()) {
//				boolean checked = item.getChecked();
//				checkAllChildren(item.getItems(), checked);
//				checkParent(item.getParentItem(), checked, false);
//				showChild(item.getItems());
//			}
			
		}
	}
	
//	private void showChild(TreeItem[] items) {
//		if(items.length<=0){
//			return;
//		}
//		
//		for(TreeItem item:items) {
//			boolean checked = item.getChecked();
//			checkAllChildren(item.getItems(), checked);
//			checkParent(item.getParentItem(), checked, false);
//			showChild(item.getItems());
//		}
//	}
	
	private void accept() {
		if(tag == null) {
			tag = new HashSet<>();
		}
		
		tag.clear();
		TreeItem[] items = treeDevice.getItems();
		for (TreeItem treeItem : items) {
			if(treeItem.getChecked()==true) {
				Object data = treeItem.getData();
				if(data!=null&&data instanceof Device) {
					Device device = (Device)data;
					tag.add(device);
				}
			}
			getCheckDeviceForChild(treeItem);
		}
		
		shell.close();
	}

	private void getCheckDeviceForChild(TreeItem item){
		if(item.getItemCount()<=0) {
			return;
		}
		
		TreeItem[] items = item.getItems();
		for (TreeItem treeItem : items) {
			if(treeItem.getChecked()==true) {
				Object data = treeItem.getData();
				if(data!=null&&data instanceof Device) {
					Device device = (Device)data;
					tag.add(device);
				}
			}
			getCheckDeviceForChild(treeItem);
		}
	}
	
	private void showDeviceForZone(Tree parent,Zone zone) {
		Kind k = null;
		Object data = comboDeviceKind.getData(comboDeviceKind.getText());
		if(data!=null&&data instanceof Kind) {
			k = (Kind)data;
		}	
		
		TreeItem item = new TreeItem(parent, SWT.CHECK);
		item.setText(zone.getName());
		item.setImage(Resource.getImage(FMain.class, "/com/kiy/resources/zone.png"));
		Set<Device> devices = zone.getDevices();
		for(Device device:devices) {
			if(device.getKind()==k) {
				TreeItem item1 = new TreeItem(item, SWT.CHECK);
				item1.setText(device.getName());
				item1.setData(device);
				item1.setImage(F.getDeviceImageIngnoreStatus(device));
			}
		}
		Set<Zone> zones = zone.getZones();
		for (Zone zone2 : zones) {
			showDeviceForZone(item, zone2);
		}
		item.setExpanded(true);
	}
	
	private void showDeviceForZoneMake(Tree parent,Zone zone) {
		Kind k = null;
		Object data = comboDeviceKind.getData(comboDeviceKind.getText());
		if(data!=null&&data instanceof Kind) {
			k = (Kind)data;
		}	
		
		TreeItem item = new TreeItem(parent, SWT.CHECK);
		item.setText(zone.getName());
		item.setImage(Resource.getImage(FMain.class, "/com/kiy/resources/zone.png"));
		Set<Device> devices = zone.getDevices();
		for(Device device:devices) {
			if(device.getKind()==k) {
				TreeItem item1 = new TreeItem(item, SWT.CHECK);
				item1.setText(device.getName());
				item1.setData(device);
				item1.setImage(F.getDeviceImageIngnoreStatus(device));
				if(tag.contains(device)) {
					item1.setChecked(true);
				}
			}
		}
		Set<Zone> zones = zone.getZones();
		for (Zone zone2 : zones) {
			showDeviceForZoneMake(item, zone2);
		}
		item.setExpanded(true);
	}
	
	private void showDeviceForZone(TreeItem parent,Zone zone) {
		Kind k = null;
		Object data = comboDeviceKind.getData(comboDeviceKind.getText());
		if(data!=null&&data instanceof Kind) {
			k = (Kind)data;
		}	
		
		TreeItem item = new TreeItem(parent, SWT.CHECK);
		item.setText(zone.getName());
		item.setImage(Resource.getImage(FMain.class, "/com/kiy/resources/zone.png"));
		Set<Device> devices = zone.getDevices();
		for(Device device:devices) {
			if(device.getKind()==k) {
				TreeItem item1 = new TreeItem(item, SWT.CHECK);
				item1.setText(device.getName());
				item1.setData(device);
				item1.setImage(F.getDeviceImageIngnoreStatus(device));
			}
		}
		Set<Zone> zones = zone.getZones();
		for (Zone zone2 : zones) {
			showDeviceForZone(item, zone2);
		}
		item.setExpanded(true);
	}
	
	private void showDeviceForZoneMake(TreeItem parent,Zone zone) {
		Kind k = null;
		Object data = comboDeviceKind.getData(comboDeviceKind.getText());
		if(data!=null&&data instanceof Kind) {
			k = (Kind)data;
		}	
		
		TreeItem item = new TreeItem(parent, SWT.CHECK);
		item.setText(zone.getName());
		item.setImage(Resource.getImage(FMain.class, "/com/kiy/resources/zone.png"));
		Set<Device> devices = zone.getDevices();
		for(Device device:devices) {
			if(device.getKind()==k) {
				TreeItem item1 = new TreeItem(item, SWT.CHECK);
				item1.setText(device.getName());
				item1.setData(device);
				item1.setImage(F.getDeviceImageIngnoreStatus(device));
				if(tag.contains(device)) {
					item1.setChecked(true);
				}
			}
		}
		Set<Zone> zones = zone.getZones();
		for (Zone zone2 : zones) {
			showDeviceForZoneMake(item, zone2);
		}
		item.setExpanded(true);
	}
	
	
	/**
	 * 设备类型下拉框点击事件（用于更新树结构）
	 */
	private SelectionAdapter comboDeviceKindSelectionAdapter = new SelectionAdapter() {
		@Override
		public void widgetSelected(SelectionEvent arg0) {
			treeDevice.removeAll();
			
			Set<Device> rootDevices = servo.getRootDevices();
			Set<Zone> rootZones = servo.getRootZones();
			//1.根级设备
			Kind k = null;
			Object data = comboDeviceKind.getData(comboDeviceKind.getText());
			if(data!=null&&data instanceof Kind) {
				k = (Kind)data;
			}	
			
			for (Device device : rootDevices) {
					if(device.getKind() == k) {
						TreeItem item = new TreeItem(treeDevice, SWT.NONE);
						item.setText(device.getName());
						item.setData(device);
					}
			}
			
			//2.递归显示区域下的设备
			for (Zone zone : rootZones) {
				showDeviceForZone(treeDevice,zone);
			}
		}
	};
	
	
	/**
	 * 子节点选中
	 * 
	 * @param children
	 * @param checked
	 */
	private void checkAllChildren(TreeItem[] children, boolean checked) {
		if (children.length == 0)
			return;
		for (TreeItem child : children) {
			child.setChecked(checked);
			child.getParentItem().setGrayed(false);
			checkAllChildren(child.getItems(), checked);
		}
	}
	
	/**
	 * 父节点选中
	 * 
	 * @param parent
	 * @param checked
	 * @param grayed
	 */
	private void checkParent(TreeItem parent, boolean checked, boolean grayed) {
		if (parent == null)
			return;
		for (TreeItem child : parent.getItems()) {

			if (checked != child.getChecked()) {
				// 选中状态不相同，没有全部选中
				checked = true;
				grayed = true;
				break;
			} else {
				grayed = false;
			}
		}
		parent.setChecked(checked);
		parent.setGrayed(grayed);
		
		TreeItem parentItem = parent.getParentItem();
		checkParent(parentItem,checked,grayed);
	}
	
	private SelectionAdapter btnAcceptSelectionAdapter = new SelectionAdapter() {
		@Override
		public void widgetSelected(SelectionEvent arg0) {
			accept();
		}
	};
	
}
