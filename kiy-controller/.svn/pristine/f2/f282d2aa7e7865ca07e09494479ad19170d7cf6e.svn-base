package com.kiy.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CLabel;
import org.eclipse.swt.events.FocusAdapter;
import org.eclipse.swt.events.FocusEvent;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.ShellAdapter;
import org.eclipse.swt.events.ShellEvent;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Dialog;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Text;

import com.kiy.client.CtrClient;
import com.kiy.common.Device;
import com.kiy.common.Feature;
import com.kiy.common.Sence;
import com.kiy.common.SenceDevice;
import com.kiy.common.Servo;
import com.kiy.common.Tool;
import com.kiy.protocol.Messages.CreateSence;
import com.kiy.protocol.Messages.Message;
import com.kiy.protocol.Messages.UpdateSence;
import com.kiy.protocol.Units.MSence;
import com.kiy.protocol.Units.MSenceDevice;
import com.kiy.resources.Lang;
import com.kiy.resources.Resource;

public class FSence extends Dialog {
	private Shell shell;

	private CLabel labelText; // 输入验证
	private Text nameText;// 场景名称
	private Text remarkText; // 场景描述
	private Composite compositeOpen; // 开启场景面板
	private Composite compositeClose; // 关闭场景面板
	private Button buttonAdd; // 添加按钮
	private Button buttonAdd2; // 添加按钮2
	private Button buttonRemove; // 移除设备按钮
	private Button buttonRemove2; // 移除设备按钮2
	private Button buttonModify; // 修改feature按钮
	private Button buttonModify2; // 修改feature按钮2
	private Button btnAccept; // 确认按钮
	private Button btnCancel; // 取消按钮
	private Table tableOpen; // 开启场景设备table
	private Table tableClose; // 关闭场景设备table
	private Table table; // 显示设备table
	private Table table2; // 显示设备table2
	private TableColumn tableColumn;
	private TableColumn tableColumn2;
	private TableColumn tableColumn3;
	private TableColumn tableColumn4;
	private TableColumn tblclmnFea;
	private TableColumn tblclmnFea2;
	private TableColumn tableColumn_2;
	private TableColumn tableColumn_2_2;
	private TableColumn tableColumn_3;
	private TableColumn tableColumn_3_2;
	private TableItem item;

	public List<Device> openDevicesTemp = new ArrayList<>();
	public List<Device> closeDevicesTemp = new ArrayList<>();
	private List<Device> devicesList;
	private Servo servo;
	private Sence sence;
	private Set<SenceDevice> senceOpenDevicesSet = new HashSet<>();
	private Set<SenceDevice> senceCloseDevicesSet = new HashSet<>();

	public boolean isUpdate = false;
	private boolean closing;

	public FSence(Shell arg0) {
		super(arg0);
	}

	public Sence open(Servo s, Sence e) {
		if (s == null) {
			throw new NullPointerException("Servo can not be null!");
		}
		servo = s;
		sence = e;

		createContent();
		F.center(getParent(), shell);
		shell.open();
		shell.layout();
		Display display = getParent().getDisplay();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}
		return sence;
	}

	private void createContent() {
		shell = new Shell(getParent(), SWT.DIALOG_TRIM | SWT.SYSTEM_MODAL);
		shell.setSize(595, 429);
		shell.setText(Lang.getString("FSence.ShellName.text"));
		shell.addFocusListener(focusAdapter);
		shell.addShellListener(shellAdapter);

		labelText = new CLabel(shell, SWT.NONE);
		labelText.setBounds(16, 16, 517, 32);
		labelText.setVisible(false);
		labelText.setImage(Resource.getImage(FMain.class, "/com/kiy/resources/verify.png"));

		Label labelImage = new Label(shell, SWT.NONE);
		labelImage.setBounds(541, 16, 32, 32);
		labelImage.setImage(Resource.getImage(FMain.class, "/com/kiy/resources/device_scheduling_32.png"));

		Label labelTop = new Label(shell, SWT.SEPARATOR | SWT.HORIZONTAL);
		labelTop.setBounds(0, 62, 665, 2);

		TabFolder tabFolder = new TabFolder(shell, SWT.NONE);
		tabFolder.setBounds(16, 70, 557, 287);

		TabItem tabConvention = new TabItem(tabFolder, SWT.NONE);
		tabConvention.setText(Lang.getString("FSence.TableItemConventional.text"));

		Composite compositeConvention = new Composite(tabFolder, SWT.NONE);
		tabConvention.setControl(compositeConvention);
		// 常规
		{
			CLabel lblNewLabel = new CLabel(compositeConvention, SWT.NONE);
			lblNewLabel.setBounds(16, 28, 76, 23);
			lblNewLabel.setText(Lang.getString("FSence.TableItemName.text"));

			// 场景名称
			nameText = new Text(compositeConvention, SWT.BORDER);
			nameText.setBounds(100, 28, 433, 23);
			nameText.setTextLimit(32);
			nameText.addModifyListener(modifyListener);
			nameText.addFocusListener(focusAdapter);

			CLabel lblNewLabel_1 = new CLabel(compositeConvention, SWT.NONE);
			lblNewLabel_1.setBounds(16, 92, 76, 23);
			lblNewLabel_1.setText(Lang.getString("FSence.TableItemDescription.text"));
			// 场景描述
			remarkText = new Text(compositeConvention, SWT.BORDER | SWT.WRAP);
			remarkText.setBounds(100, 87, 433, 78);
			remarkText.setTextLimit(128);

			// 取消按钮
			btnCancel = new Button(shell, SWT.NONE);
			btnCancel.setBounds(493, 365, 80, 27);
			btnCancel.setText(Lang.getString("Cancel.text"));
			btnCancel.addSelectionListener(btnCancelSelectionAdapter);

			// 确定按钮
			btnAccept = new Button(shell, SWT.NONE);
			btnAccept.setBounds(405, 365, 80, 27);
			btnAccept.setText(Lang.getString("Ensure.text"));
			btnAccept.addSelectionListener(btnAcceptSelectionAdapter);

			TabItem tabItem = new TabItem(tabFolder, 0);
			tabItem.setText(Lang.getString("FSence.tabItem.text"));

			compositeOpen = new Composite(tabFolder, SWT.NONE);
			tabItem.setControl(compositeOpen);

			// 添加设备按钮
			buttonAdd = new Button(compositeOpen, SWT.NONE);
			buttonAdd.setText(Lang.getString("FSence2.btnAddWrite.text")); 
			buttonAdd.setBounds(253, 84, 41, 23);
			buttonAdd.addSelectionListener(btnAddOpenSelectionAdapter);

			// 移除设备按钮
			buttonRemove = new Button(compositeOpen, SWT.NONE);
			buttonRemove.setText(Lang.getString("FSence2.button.text")); 
			buttonRemove.setBounds(253, 130, 41, 23);
			buttonRemove.addSelectionListener(btnRemoveOpenSelectionAdapter);

			// 修改feature按钮
			buttonModify = new Button(compositeOpen, SWT.NONE);
			buttonModify.setText(Lang.getString("FSence2.buttonModify.text")); 
			buttonModify.setBounds(253, 161, 41, 23);
			buttonModify.addSelectionListener(btnModifyOpenSelectionAdapter);

			// 显示设备table
			table = new Table(compositeOpen, SWT.BORDER | SWT.FULL_SELECTION);
			table.setLinesVisible(true);
			table.setHeaderVisible(true);
			table.setBounds(10, 20, 238, 221);

			// 开启场景设备table
			tableOpen = new Table(compositeOpen, SWT.BORDER | SWT.FULL_SELECTION);
			tableOpen.setBounds(302, 20, 247, 221);
			tableOpen.setLinesVisible(true);
			tableOpen.setHeaderVisible(true);

			tableColumn_2 = new TableColumn(table, SWT.NONE);
			tableColumn_2.setWidth(115);
			tableColumn_2.setText(Lang.getString("FSence.TableItemName.text"));

			tableColumn_3 = new TableColumn(table, SWT.NONE);
			tableColumn_3.setWidth(118);
			tableColumn_3.setText(Lang.getString("FSence.TableItemArea"));

			devicesList = new ArrayList<>(servo.getCanControlDevices());
			for (Device device : devicesList) {
				item = new TableItem(table, SWT.NONE);
				item.setText(0, device.getName());
				item.setImage(0, Resource.getImage(FMain.class, String.format("/com/kiy/resources/device_%s_none.png", Tool.toLowerCase(device.getKind()))));
				item.setText(1, device.getZone() == null ? Lang.getString("FAddDeviceToMap.NoZone.text") : device.getZone().getName());
				item.setData(device);
			}

			tableColumn = new TableColumn(tableOpen, SWT.NONE);
			tableColumn.setWidth(79);
			tableColumn.setText(Lang.getString("FSence.TableItemName.text"));

			//特性名称
			tblclmnFea = new TableColumn(tableOpen, SWT.NONE);
			tblclmnFea.setWidth(72);
			tblclmnFea.setText(Lang.getString("FSence2.tblclmnFea.text")); 

			//开关状态
			tableColumn2 = new TableColumn(tableOpen, SWT.NONE);
			tableColumn2.setWidth(89);
			tableColumn2.setText(Lang.getString("FSence2.tblclmnStatus.text"));

			TabItem tabItem1 = new TabItem(tabFolder, 0);
			tabItem1.setText(Lang.getString("FSence.tabItem.text2"));

			// 关闭场景面板
			compositeClose = new Composite(tabFolder, SWT.NONE);
			tabItem1.setControl(compositeClose);

			// 添加设备按钮2
			buttonAdd2 = new Button(compositeClose, SWT.NONE);
			buttonAdd2.setText(Lang.getString("FSence2.btnAddWrite.text")); 
			buttonAdd2.setBounds(253, 84, 41, 23);
			buttonAdd2.addSelectionListener(btnAddCloseSelectionAdapter);

			// 移除设备按钮2
			buttonRemove2 = new Button(compositeClose, SWT.NONE);
			buttonRemove2.setText(Lang.getString("FSence2.button.text")); 
			buttonRemove2.setBounds(253, 130, 41, 23);
			buttonRemove2.addSelectionListener(btnRemoveCloseSelectionAdapter);

			// 修改feature按钮2
			buttonModify2 = new Button(compositeClose, SWT.NONE);
			buttonModify2.setText(Lang.getString("FSence2.buttonModify.text")); 
			buttonModify2.setBounds(253, 161, 41, 23);
			buttonModify2.addSelectionListener(btnModifyCloseSelectionAdapter);

			// 显示设备table2
			table2 = new Table(compositeClose, SWT.BORDER | SWT.FULL_SELECTION);
			table2.setLinesVisible(true);
			table2.setHeaderVisible(true);
			table2.setBounds(10, 20, 238, 221);

			// 开启场景设备table
			tableClose = new Table(compositeClose, SWT.BORDER | SWT.FULL_SELECTION);
			tableClose.setBounds(302, 20, 247, 221);
			tableClose.setLinesVisible(true);
			tableClose.setHeaderVisible(true);

			tableColumn_2_2 = new TableColumn(table2, SWT.NONE);
			tableColumn_2_2.setWidth(115);
			tableColumn_2_2.setText(Lang.getString("FSence.TableItemName.text"));

			tableColumn_3_2 = new TableColumn(table2, SWT.NONE);
			tableColumn_3_2.setWidth(118);
			tableColumn_3_2.setText(Lang.getString("FSence.TableItemArea"));

			devicesList = new ArrayList<>(servo.getCanControlDevices());
			for (Device device : devicesList) {
				item = new TableItem(table2, SWT.NONE);
				item.setText(0, device.getName());
				item.setImage(0, Resource.getImage(FMain.class, String.format("/com/kiy/resources/device_%s_none.png", Tool.toLowerCase(device.getKind()))));
				item.setText(1, device.getZone() == null ? Lang.getString("FAddDeviceToMap.NoZone.text") : device.getZone().getName());
				item.setData(device);
			}

			tableColumn3 = new TableColumn(tableClose, SWT.NONE);
			tableColumn3.setWidth(79);
			tableColumn3.setText(Lang.getString("FSence.TableItemName.text"));

			tblclmnFea2 = new TableColumn(tableClose, SWT.NONE);
			tblclmnFea2.setWidth(72);
			tblclmnFea2.setText(Lang.getString("FSence2.tblclmnFea.text")); 

			tableColumn4 = new TableColumn(tableClose, SWT.NONE);
			tableColumn4.setWidth(89);
			tableColumn4.setText(Lang.getString("FSence2.tblclmnStatus.text"));

			make();
		}
	}

	private void make() {
		if (sence != null) {
			nameText.setText(sence.getName());
			remarkText.setText(sence.getRemark());
			// 开启场景
			if (sence.getOpenDevices() != null) {
				// 1.表格显示
				List<SenceDevice> openDevices = sence.getOpenDevices();
				for (SenceDevice senceDevice : openDevices) {
					senceOpenDevicesSet.add(senceDevice);
					showOpenTable();
				}
			}

			// 关闭场景
			if (sence.getOffDevices() != null) {
				// 1.表格显示
				List<SenceDevice> closeDevices = sence.getOffDevices();
				for (SenceDevice senceDevice : closeDevices) {
					senceCloseDevicesSet.add(senceDevice);
					showCloseTable();
				}
			}

		}
		// 添加设备
		if (senceOpenDevicesSet.size() >= 0) {
			tableOpen.removeAll();
			showOpenTable();
		}
	}

	/**
	 * 开启场景设备表格显示
	 */
	public void showOpenTable() {
		tableOpen.removeAll();
		for (SenceDevice senceDevice : senceOpenDevicesSet) {
			Device device = servo.getDevice(senceDevice.getDeviceId());
			Device d = device;
			Feature feature = d.getFeature(senceDevice.getFeatureIndex());
			feature.setValue(senceDevice.getFeatureValue());
			TableItem tableItem = new TableItem(tableOpen, SWT.NONE);
			tableItem.setText(0, device.getName());
			tableItem.setText(1, feature.getName());
			tableItem.setText(2, feature.getText());
			tableItem.setData(senceDevice);
		}
	}

	/**
	 * 关闭场景设备表格显示
	 */
	public void showCloseTable() {
		tableClose.removeAll();
		for (SenceDevice senceDevice : senceCloseDevicesSet) {
			Device device = servo.getDevice(senceDevice.getDeviceId());
			Feature feature = device.getFeature(senceDevice.getFeatureIndex());
			TableItem tableItem = new TableItem(tableClose, SWT.NONE);
			tableItem.setText(0, device.getName());
			tableItem.setText(1, feature.getName());
			tableItem.setText(2, Integer.toString(senceDevice.getFeatureValue()));
			tableItem.setData(senceDevice);
		}
	}

	/*
	 * TODO 添加验证
	 */
	private FocusAdapter focusAdapter = new FocusAdapter() {
		@Override
		public void focusGained(FocusEvent arg0) {
			verify();
		}
	};

	private ModifyListener modifyListener = new ModifyListener() {

		@Override
		public void modifyText(ModifyEvent arg0) {
			verify();
		}
	};

	private ShellAdapter shellAdapter = new ShellAdapter() {
		@Override
		public void shellClosed(ShellEvent arg0) {
			closing = true;
			close();
		}
	};

	private void close() {
		if (closing) {

		} else {
			shell.close();
		}
	}

	/**
	 * 验证输入
	 */
	private void verify() {
		btnAccept.setEnabled(false);
		labelText.setVisible(true);

		if (Tool.isEmpty(nameText.getText())) {
			labelText.setText(Lang.getString("FSence.verifynameText.text"));
			return;
		} else {
			labelText.setText(Tool.EMPTY);
			labelText.setVisible(false);
			btnAccept.setEnabled(true);
		}
	}

	/**
	 * 添加开始场景设备
	 */
	private SelectionAdapter btnAddOpenSelectionAdapter = new SelectionAdapter() {
		@Override
		public void widgetSelected(SelectionEvent arg0) {

			TableItem[] selection = table.getSelection();
			if (selection == null || selection.length <= 0) {
				F.mbInformation(shell, Lang.getString("FSence.add.text"), Lang.getString("FSence.addRemind.text"));
				return;
			}
			Object data = selection[0].getData();
			if (data != null && data instanceof Device) {
				Device device = (Device) data;
				FSelectDeviceFeature f = new FSelectDeviceFeature(shell);
				SenceDevice senceDevice = f.open(device);
				if (senceDevice != null) {
					senceDevice.setSwitchStatus(true);
					senceOpenDevicesSet.add(senceDevice);
				}
				showOpenTable();
			}
		}
	};

	/**
	 * 添加关闭场景设备
	 */
	private SelectionAdapter btnAddCloseSelectionAdapter = new SelectionAdapter() {
		@Override
		public void widgetSelected(SelectionEvent arg0) {
			TableItem[] selection = table2.getSelection();
			if (selection == null || selection.length <= 0) {
				F.mbInformation(shell, Lang.getString("FSence.add.text"), Lang.getString("FSence.addRemind.text"));
				return;
			}
			Object data = selection[0].getData();
			if (data != null && data instanceof Device) {
				Device device = (Device) data;
				FSelectDeviceFeature f = new FSelectDeviceFeature(shell);
				SenceDevice senceDevice = f.open(device);
				if (senceDevice != null) {
					senceCloseDevicesSet.add(senceDevice);
				}
				showCloseTable();
			}
		}
	};

	/**
	 * 移除开启场景设备
	 */
	private SelectionAdapter btnRemoveOpenSelectionAdapter = new SelectionAdapter() {
		@Override
		public void widgetSelected(SelectionEvent arg0) {
			TableItem[] selection = tableOpen.getSelection();
			if (selection == null || selection.length <= 0) {
				F.mbInformation(shell, Lang.getString("FSence.del.text"), Lang.getString("FSence.delRemind.text"));
				return;
			}
			Object data = selection[0].getData();
			if (data != null && data instanceof SenceDevice) {
				senceOpenDevicesSet.remove(data);
				showOpenTable();
			}
		}
	};

	/**
	 * 移除关闭场景设备
	 */
	private SelectionAdapter btnRemoveCloseSelectionAdapter = new SelectionAdapter() {
		@Override
		public void widgetSelected(SelectionEvent arg0) {
			TableItem[] selection = tableClose.getSelection();
			if (selection == null || selection.length <= 0) {
				F.mbInformation(shell, Lang.getString("FSence.del.text"), Lang.getString("FSence.delRemind.text"));
				return;
			}
			Object data = selection[0].getData();
			if (data != null && data instanceof SenceDevice) {
				senceCloseDevicesSet.remove(data);
				showCloseTable();
			}
		}
	};

	/**
	 * 修改开启场景feature
	 */
	private SelectionAdapter btnModifyOpenSelectionAdapter = new SelectionAdapter() {
		@Override
		public void widgetSelected(SelectionEvent arg0) {

			TableItem[] selection = tableOpen.getSelection();
			if (selection == null || selection.length <= 0) {
				F.mbInformation(shell, Lang.getString("FSence.modify.text"), Lang.getString("FSence.modifyRemind.text"));
				return;
			}
			Object data = selection[0].getData();
			if (data != null && data instanceof SenceDevice) {
				SenceDevice senceDevice = (SenceDevice) data;
				FSelectDeviceFeature f = new FSelectDeviceFeature(shell);
				SenceDevice senceDevice2 = f.open(servo.getDevice(senceDevice.getDeviceId()));
				if (senceDevice2!=null) {
					senceDevice.setFeatureIndex(senceDevice2.getFeatureIndex());
					senceDevice.setFeatureValue(senceDevice2.getFeatureValue());
					senceOpenDevicesSet.remove(senceDevice);
					senceOpenDevicesSet.add(senceDevice2);
				}
				showOpenTable();
			}
		}
	};

	/**
	 * 修改关闭场景feature
	 */
	private SelectionAdapter btnModifyCloseSelectionAdapter = new SelectionAdapter() {
		@Override
		public void widgetSelected(SelectionEvent arg0) {

			TableItem[] selection = tableClose.getSelection();
			if (selection == null || selection.length <= 0) {
				F.mbInformation(shell, Lang.getString("FSence.modify.text"), Lang.getString("FSence.modifyRemind.text"));
				return;
			}
			Object data = selection[0].getData();
			if (data != null && data instanceof SenceDevice) {
				SenceDevice senceDevice = (SenceDevice) data;
				FSelectDeviceFeature f = new FSelectDeviceFeature(shell);
				SenceDevice senceDevice2 = f.open(servo.getDevice(senceDevice.getDeviceId()));
				if (senceDevice2!=null) {
					senceDevice.setFeatureIndex(senceDevice2.getFeatureIndex());
					senceDevice.setFeatureValue(senceDevice2.getFeatureValue());
					senceCloseDevicesSet.remove(senceDevice);
					senceCloseDevicesSet.add(senceDevice2);
				}
				showCloseTable();
			}
		}
	};

	/*
	 * 确认
	 */
	private void accept() {
		if (sence == null) {
			sence = new Sence();
			sence.newId();
			sence.setSwitchStatu(false);
			sence.setCreated(new Date());
			// 名称
			sence.setName(nameText.getText());
			// 描述
			sence.setRemark(remarkText.getText());

			/**
			 * 开启场景
			 */
			if (tableOpen.getItemCount() > 0) {
				TableItem[] items = tableOpen.getItems();
				SenceDevice sencedevice;
				for (int i = 0; i < items.length; i++) {
					Object data = items[i].getData();
					if (data != null && data instanceof SenceDevice) {
						sencedevice = (SenceDevice) data;
						sence.addOpenSenceDevice(sencedevice);
					}
				}
			}

			/**
			 * 关闭场景
			 */
			if (tableClose.getItemCount() > 0) {
				TableItem[] items = tableClose.getItems();
				SenceDevice sencedevice;
				for (int i = 0; i < items.length; i++) {
					Object data = items[i].getData();
					if (data != null && data instanceof SenceDevice) {
						sencedevice = (SenceDevice) data;
						sence.addOffSenceDevice(sencedevice);
					}
				}
			}
			Message.Builder msg = Message.newBuilder();
			msg.setUserId(servo.getUser().getId());
			msg.setKey(CtrClient.getKey());
			CreateSence.Builder createSence = CreateSence.newBuilder();
			MSence.Builder mSence = createSence.getItemBuilder();
			mSence.setId(sence.getId());
			mSence.setName(sence.getName());
			mSence.setRemark(sence.getRemark());
			mSence.setSwitch(sence.getSwitchStatu());
			mSence.setCreated(sence.getCreated().getTime());

			List<SenceDevice> offDevices = sence.getOffDevices();
			for (SenceDevice senceDevice2 : offDevices) {
				MSenceDevice.Builder mSBuilder = MSenceDevice.newBuilder();
				mSBuilder.setDeviceId(senceDevice2.getDeviceId());
				mSBuilder.setSwitch(senceDevice2.getSwitchStatus());
				mSBuilder.setFeatureIndex(senceDevice2.getFeatureIndex());
				mSBuilder.setFeatureValue(senceDevice2.getFeatureValue());
				mSence.addOffDevices(mSBuilder.build());
			}

			List<SenceDevice> openDevice = sence.getOpenDevices();
			for (SenceDevice senceDevice2 : openDevice) {
				MSenceDevice.Builder mSBuilder = MSenceDevice.newBuilder();
				mSBuilder.setDeviceId(senceDevice2.getDeviceId());
				mSBuilder.setSwitch(senceDevice2.getSwitchStatus());
				mSBuilder.setFeatureIndex(senceDevice2.getFeatureIndex());
				mSBuilder.setFeatureValue(senceDevice2.getFeatureValue());
				mSence.addOpenDevices(mSBuilder.build());
			}

			createSence.setItem(mSence);
			msg.setCreateSence(createSence).build();
			System.err.println(msg.toString());
			CtrClient client = servo.getClient();
			client.send(msg.build());
		} else {
			// 名称
			sence.setName(nameText.getText());
			// 描述
			sence.setRemark(remarkText.getText());
			sence.setUpdated(new Date());

			/**
			 * 开启场景
			 */
			if (tableOpen.getItemCount() > 0) {
				TableItem[] items = tableOpen.getItems();
				SenceDevice sencedevice;
				sence.removeAllOpenSenceDevice();
				for (int i = 0; i < items.length; i++) {
					Object data = items[i].getData();
					if (data != null && data instanceof SenceDevice) {
						sencedevice = (SenceDevice) data;
						sence.addOpenSenceDevice(sencedevice);
					}
				}
			}

			/**
			 * 关闭场景
			 */
			if (tableClose.getItemCount() > 0) {
				TableItem[] items = tableClose.getItems();
				SenceDevice sencedevice;
				sence.removeAllOffSenceDevice();
				for (int i = 0; i < items.length; i++) {
					Object data = items[i].getData();
					if (data != null && data instanceof SenceDevice) {
						sencedevice = (SenceDevice) data;
						sence.addOffSenceDevice(sencedevice);
					}
				}
			}
			Message.Builder msg = Message.newBuilder();
			msg.setUserId(servo.getUser().getId());
			msg.setKey(CtrClient.getKey());
			UpdateSence.Builder updateSence = UpdateSence.newBuilder();
			MSence.Builder mSence = updateSence.getItemBuilder();
			mSence.setId(sence.getId());
			mSence.setName(sence.getName());
			mSence.setRemark(sence.getRemark());
			mSence.setSwitch(sence.getSwitchStatu());
			mSence.setCreated(sence.getCreated().getTime());

			List<SenceDevice> offDevices = sence.getOffDevices();
			for (SenceDevice senceDevice2 : offDevices) {
				MSenceDevice.Builder mSBuilder = MSenceDevice.newBuilder();
				mSBuilder.setDeviceId(senceDevice2.getDeviceId());
				mSBuilder.setSwitch(senceDevice2.getSwitchStatus());
				mSBuilder.setFeatureIndex(senceDevice2.getFeatureIndex());
				mSBuilder.setFeatureValue(senceDevice2.getFeatureValue());
				mSence.addOffDevices(mSBuilder.build());
			}

			List<SenceDevice> openDevice = sence.getOpenDevices();
			for (SenceDevice senceDevice2 : openDevice) {
				MSenceDevice.Builder mSBuilder = MSenceDevice.newBuilder();
				mSBuilder.setDeviceId(senceDevice2.getDeviceId());
				mSBuilder.setSwitch(senceDevice2.getSwitchStatus());
				mSBuilder.setFeatureIndex(senceDevice2.getFeatureIndex());
				mSBuilder.setFeatureValue(senceDevice2.getFeatureValue());
				mSence.addOpenDevices(mSBuilder.build());
			}
			updateSence.setItem(mSence);
			msg.setUpdateSence(updateSence).build();
			System.err.println(msg.toString());
			CtrClient client = servo.getClient();
			client.send(msg.build());
		}
	}

	private SelectionAdapter btnAcceptSelectionAdapter = new SelectionAdapter() {

		@Override
		public void widgetSelected(SelectionEvent arg0) {
			isUpdate = true;
			accept();
			close();
		}
	};

	private void cancel() {
		sence = null;
		close();
	}

	private SelectionAdapter btnCancelSelectionAdapter = new SelectionAdapter() {

		@Override
		public void widgetSelected(SelectionEvent arg0) {
			cancel();
		}
	};

}
