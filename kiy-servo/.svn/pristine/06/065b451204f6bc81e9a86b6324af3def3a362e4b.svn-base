/**
 * 2017年6月18日
 */
package com.kiy.servo.driver.rs485;

import io.netty.buffer.ByteBuf;

import com.kiy.common.Device;
import com.kiy.common.Types.Status;
import com.kiy.common.devices.MudbusCOSensor;
import com.kiy.common.devices.MudbusHumitureSensor;
import com.kiy.common.devices.MudbusIluminaceSensor;
import com.kiy.common.devices.MudbusMethaneSensor;
import com.kiy.common.devices.MudbusPMSensor;
import com.kiy.common.devices.MudbusSmokeSensor;
import com.kiy.common.devices.MudbusSoilHumitureSensor;
import com.kiy.common.devices.MudbusSwitch;
import com.kiy.common.devices.MudbusSwitchingOffSensor;
import com.kiy.servo.driver.Coder;

/**
 * MUDBUS 协议Coder
 * 
 * @author HLX Tel:18996470535
 * @date 2018年4月26日 Copyright:Copyright(c) 2018
 */
public final class MudbusCoder extends Coder {
	/**
	 * 获取状态
	 */
	public static final byte STATUS = 0x03;
	/**
	 * 获取开关量状态
	 */
	public static final byte STATUS_SWITCH_OPEN_OFF = 0x02;
	/**
	 * 获取通断控制器状态
	 */
	public static final byte STATUS_SWITCH = 0x01;
	/**
	 * 控制通断控制器状态
	 */
	public static final byte CONTROL_SWITCH = 0x05;

	@Override
	public int getMaxFrame() {
		return 128;
	}

	@Override
	public void encode(Device device, ByteBuf out, byte code, int tag) {
		out.writeByte(Byte.parseByte(device.getNumber()));
		out.writeByte(code);

		switch (code) {
			case STATUS:
				switch (device.getKind()) {
				// 光照度传感器
					case SENSOR_ILLUMINANCE: {
						out.writeShort(7);
						out.writeShort(2);
						break;
					}
					// 土壤温湿度传感器
					case SOIL_SENSOR_MOISTURE_TEMPERATURE: {
						out.writeShort(2);
						out.writeShort(2);
						break;
					}
					// 甲烷传感器
					case SENSOR_METHANE: {
						out.writeShort(6);
						out.writeShort(1);
						break;
					}
					// PM2.5/PM10传感器
					case SENSOR_PM: {
						out.writeShort(4);
						out.writeShort(6);
						break;
					}
					// CO传感器
					case SENSOR_CO: {
						out.writeShort(6);
						out.writeShort(1);
						break;
					}
					// 烟雾传感器
					case SENSOR_SMOKE: {
						out.writeShort(3);// 设置起始位置为3
						out.writeShort(1);// 设置数据长度为1
						break;
					}
					// 温湿度传感器
					case SENSOR_MOISTURE_TEMPERATURE: {
						out.writeShort(0);
						out.writeShort(2);
						break;
					}
					default:
						break;
				}
				break;
			case STATUS_SWITCH_OPEN_OFF:
				// 开关量传感器
				out.writeShort(0);
				out.writeShort(8);
				break;
			case STATUS_SWITCH:
				// 开关控制器
				out.writeShort(0);
				out.writeShort(1);
				break;
			case CONTROL_SWITCH:
				MudbusSwitch mudbusSwitch = (MudbusSwitch) device;
				if (mudbusSwitch.isFeed()) {
					out.writeShort(0);
					out.writeShort(0);
				} else {
					out.writeShort(0);
					out.writeByte(0xFF);
					out.writeByte(0);
				}
				break;
			default:
				break;
		}

		CRC.write(out);
	}

	@Override
	public int frame(Device device, ByteBuf in) {

		// 已收到字节总数
		int readable = in.readableBytes();

		if (readable < 5)
			return Coder.CONTINUE;

		if (readable > 128) {
			device.setStatus(Status.C_OVERFLOW);
			return Coder.OVERFLOW;
		}

		// 协议指令
		short code = in.getUnsignedByte(1);
		// 协议字节数
		short length = 0;
		// 根据指令判断长度
		if (code == STATUS || code == STATUS_SWITCH_OPEN_OFF || code == STATUS_SWITCH) {
			length = in.getUnsignedByte(2);
		} else {
			length = 3;
		}

		if (length + 5 > readable) {
			return Coder.CONTINUE;
		} else {
			length += 5;
		}
		return Coder.OK;
	}

	@Override
	public void decode(Device device, ByteBuf in, byte code, int tag) {
		if (in.readableBytes() == 0) {
			device.setStatus(Status.C_TIMEOUT);
			return;
		}

		// 地址 B1
		if (!device.getNumber().equals(Byte.toString(in.readByte()))) {
			device.setStatus(Status.C_ADDRESS);
			return;
		}

		// 代码 B1
		if (code != in.readByte()) {
			device.setStatus(Status.C_COMMAND);
			return;
		}

		// 复位正常
		device.setStatus(Status.NONE);

		// 长度 B1
		in.readByte();

		switch (code) {
			case STATUS:
				switch (device.getKind()) {
					case SENSOR_ILLUMINANCE: {
						MudbusIluminaceSensor dev = (MudbusIluminaceSensor) device;
						int readInt = in.readInt();
						dev.setDegree(readInt);
						break;
					}
					case SOIL_SENSOR_MOISTURE_TEMPERATURE: {
						MudbusSoilHumitureSensor dev = (MudbusSoilHumitureSensor) device;
						short readShort = in.readShort();
						dev.getFeature(0).setValue(readShort);
						readShort = in.readShort();
						dev.getFeature(1).setValue(readShort);
						break;
					}
					case SENSOR_METHANE: {
						MudbusMethaneSensor dev = (MudbusMethaneSensor) device;
						/*
						 * 例如可燃气体 0x0002(十六进制)=2=>可燃气体=0.2% 该值为爆炸下限 百分比
						 * 具体参考JXMethaneSensor
						 */
						short readShort = in.readShort();
						dev.setDegree(readShort);
						break;
					}
					case SENSOR_PM: {
						MudbusPMSensor dev = (MudbusPMSensor) device;
						short pm25 = in.readShort();/* 读取PM2.5值 */
						dev.setPM25(pm25);
						// 读取无用值8个
						in.readInt();
						in.readInt();
						short pm10 = in.readShort();/* 读取PM10值 */
						dev.setPM10(pm10);
						break;
					}
					case SENSOR_CO: {
						MudbusCOSensor dev = (MudbusCOSensor) device;
						short co = in.readShort();/* 读取CO值 189-> 18.9ppm */
						dev.getFeature(0).setValue(co);
						break;
					}
					case SENSOR_SMOKE: {
						MudbusSmokeSensor dev = (MudbusSmokeSensor) device;
						// 状态 0000正常/0001报警
						dev.setFeed(in.readShort() == 1);
						break;
					}
					case SENSOR_MOISTURE_TEMPERATURE: {
						MudbusHumitureSensor dev = (MudbusHumitureSensor) device;
						short readShort = in.readShort();
						dev.getFeature(0).setValue(readShort);
						readShort = in.readShort();
						dev.getFeature(1).setValue(readShort);
						break;
					}
					default:
						break;
				}
				break;
			case STATUS_SWITCH_OPEN_OFF:
				MudbusSwitchingOffSensor mudbusSwitchingOffSensor = (MudbusSwitchingOffSensor) device;
				byte feed = in.readByte();
				mudbusSwitchingOffSensor.getFeature(0).setValue(feed);
				break;
			case STATUS_SWITCH:
				MudbusSwitch mudbusSwitch = (MudbusSwitch) device;
				byte readbyte = in.readByte();/* 0为开 1为关 */
				System.out.println("开关状态 : 0为开 1为关     " + readbyte);
				mudbusSwitch.setFeed(readbyte == 0);
				break;
			case CONTROL_SWITCH:
				MudbusSwitch mudbusSwitch2 = (MudbusSwitch) device;
				in.readByte();
				if (in.readByte()== -1) { /* 关 */
					mudbusSwitch2.setFeed(false);
				} else {/* 开 */
					mudbusSwitch2.setFeed(true);
				}
				in.readByte();
				break;
			default:
				break;
		}
		// CRC16
		in.skipBytes(2);
	}
}