/**
 * 2017年2月16日
 */
package com.kiy.servo.data;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import com.kiy.common.Device;
import com.kiy.common.Feature;
import com.kiy.common.FeedBack;
import com.kiy.common.Maintain;
import com.kiy.common.Notice;
import com.kiy.common.Role;
import com.kiy.common.Sence;
import com.kiy.common.SenceDevice;
import com.kiy.common.Servo;
import com.kiy.common.Task;
import com.kiy.common.Tool;
import com.kiy.common.Types.Kind;
import com.kiy.common.Types.Link;
import com.kiy.common.Types.Origin;
import com.kiy.common.Types.Repair;
import com.kiy.common.Types.Use;
import com.kiy.common.Types.Vendor;
import com.kiy.common.ULog;
import com.kiy.common.User;
import com.kiy.common.Zone;
import com.kiy.protocol.Messages.Message;
import com.kiy.servo.Log;

/**
 * MySql数据库操作
 * 
 * @author Simon(ZhangXi TEL:13883833982)
 *
 */
public final class DBMySQL extends DataBank {

	public DBMySQL(DBConnection c) {
		super(c);
	}

	private final static String SELECT_DEVICES = "SELECT * FROM `devices` WHERE ?updated IS NULL OR `updated`>?updated";
	private final static String SELECT_TASKS = "SELECT * FROM `tasks` WHERE ?updated IS NULL OR `updated`>?updated";
	private final static String SELECT_TASK_DEVICES = "SELECT * FROM `task_devices` WHERE `task`=?task AND `rw`=?rw";
	private final static String SELECT_ZONES = "SELECT * FROM `zones` WHERE ?updated IS NULL OR `updated`>?updated";
	private final static String SELECT_USERS = "SELECT * FROM `users` WHERE ?updated IS NULL OR `updated`>?updated";
	private final static String SELECT_USER_ROLES = "SELECT * FROM `user_roles` WHERE `user`=?user";
	private final static String SELECT_ROLES = "SELECT * FROM `roles` WHERE ?updated IS NULL OR `updated`>?updated";
	private final static String SELECT_ROLE_POWERS = "SELECT * FROM `role_powers` WHERE `role`=?role";
	private final static String SELECT_DELETES = "SELECT `id` FROM `deletes` WHERE ?created IS NULL OR `created`>?created";
	private final static String SELECT_SENCE= "SELECT * FROM `sences` WHERE ?updated IS NULL OR `updated`>?updated";
	private final static String SELECT_SENCE_DEVICE = "SELECT * FROM `sence_devices` WHERE `sence`=?sence";
	
	private final static String QUERY_DEVICE_STATUS = "SELECT * FROM `device_status` WHERE `device`=?device AND `created`>=?begin AND `created`<=?end ORDER BY `created`";
	private final static String QUERY_DEVICE_MAINTAIN = "SELECT * FROM `maintains` WHERE `device`=?device AND `created`>=?begin AND `created`<=?end ORDER BY `created`";
	private final static String QUERY_LOG = "SELECT * FROM `logs` WHERE (?user IS NULL OR `user`=?user) AND `created`>=?begin AND `created`<=?end ORDER BY `created`";
	private final static String QUERY_USER_ICON = "SELECT `icon_url` FROM `users` WHERE `id`=?id";
	
	
	private final static String MOVE_ZONE = "UPDATE `zones` SET `parent`=?parent,`updated`=?updated WHERE `id`=?id";
	private final static String MOVE_DEVICE = "UPDATE `devices` SET `zone`=?zone,`relay`=?relay,`updated`=?updated WHERE `id`=?id";
	private final static String MOVE_POSITION = "UPDATE `devices` SET `longitude`=?longitude,`latitude`=?latitude,`altitude`=?altitude,`updated`=?updated WHERE `id`=?id";

	private final static String CREATE_USER = "INSERT INTO `users` (`id`,`zone`,`name`,`password`,`enable`,`realname`,`nickname`,`mobile`,`phone`,`email`,`remark`,`created`,`updated`) VALUES (?id,?zone,?name,?password,?enable,?realname,?nickname,?mobile,?phone,?email,?remark,?created,?created)";
	private final static String CREATE_USER_ROLES = "INSERT INTO `user_roles` (`role`,`user`,`created`) VALUES (?role,?user,?created)";
	private final static String CREATE_ROLE = "INSERT INTO `roles` (`id`,`name`,`remark`,`created`,`updated`) VALUES (?id,?name,?remark,?created,?created)";
	private final static String CREATE_ROLE_POWER = "INSERT INTO `role_powers` (`role`,`command`,`created`) VALUES (?role,?command,?created)";
	private final static String CREATE_ZONE = "INSERT INTO `zones` (`id`,`name`,`parent`,`remark`,`created`,`updated`) VALUES (?id,?name,?parent,?remark,?created,?created)";
	private final static String CREATE_TASK = "INSERT INTO `tasks`(`id`,`name`,`start`,`stop`,`month`,`week`,`day`,`interval`,`repeat`,`read_type`,`write_type`,`read_feature`,`write_feature`,`limit_lower`,`limit_upper`,`feed`,`feed_lower`,`feed_upper`,`role`,`enable`,`remark`,`created`,`updated`) VALUES (?id,?name,?start,?stop,?month,?week,?day,?interval,?repeat,?read_type,?write_type,?read_feature,?write_feature,?limit_lower,?limit_upper,?feed,?feed_lower,?feed_upper,?role,?enable,?remark,?created,?created)";
	private final static String CREATE_TASK_DEVICES = "INSERT INTO `task_devices`(`task`,`device`,`rw`,`created`) VALUES(?task,?device,?rw,?created)";
	private final static String CREATE_DEVICE = "INSERT INTO `devices` (`id`,`zone`,`relay`,`owner`,`vendor`,`kind`,`link`,`use`,`sn`,`name`,`number`,`username`,`password`,`network_ip`,`network_port`,`serial_port`,`serial_baud_rate`,`load`,`power`,`mutual`,`delay`,`address`,`installed`,`produced`,`longitude`,`latitude`,`altitude`,`phase_check`,`phase_power`,`notice`,`detect`,`remark`,`created`,`updated`) VALUES (?id,?zone,?relay,?owner,?vendor,?kind,?link,?use,?sn,?name,?number,?username,?password,?network_ip,?network_port,?serial_port,?serial_baud_rate,?load,?power,?mutual,?delay,?address,?installed,?produced,?longitude,?latitude,?altitude,?phase_check,?phase_power,?notice,?detect,?remark,?created,?created)";
	private final static String CREATE_DEVICE_STATUS = "INSERT INTO `device_status`(`id`,`device`,`origin`,`s01`,`s02`,`s03`,`s04`,`s05`,`s06`,`s07`,`s08`,`s09`,`s10`,`s11`,`s12`,`s13`,`s14`,`s15`,`s16`,`s17`,`s18`,`s19`,`s20`,`s21`,`s22`,`s23`,`s24`,`s25`,`s26`,`s27`,`s28`,`s29`,`s30`,`s31`,`s32`,`s33`,`s34`,`s35`,`s36`,`s37`,`s38`,`s39`,`s40`,`s41`,`s42`,`s43`,`s44`,`s45`,`s46`,`s47`,`s48`,`s49`,`s50`,`s51`,`s52`,`s53`,`s54`,`s55`,`s56`,`s57`,`s58`,`s59`,`s60`,`s61`,`s62`,`s63`,`s64`,`created`)VALUES(?id,?device,?origin,?s01,?s02,?s03,?s04,?s05,?s06,?s07,?s08,?s09,?s10,?s11,?s12,?s13,?s14,?s15,?s16,?s17,?s18,?s19,?s20,?s21,?s22,?s23,?s24,?s25,?s26,?s27,?s28,?s29,?s30,?s31,?s32,?s33,?s34,?s35,?s36,?s37,?s38,?s39,?s40,?s41,?s42,?s43,?s44,?s45,?s46,?s47,?s48,?s49,?s50,?s51,?s52,?s53,?s54,?s55,?s56,?s57,?s58,?s59,?s60,?s61,?s62,?s63,?s64,NOW())";
	private final static String CREATE_MAINTAIN = "INSERT INTO `maintains` (`id`,`device`,`repair`,`sn`,`load`,`power`,`radix`,`energy_balance`,`mutual`,`remark`,`created`,`updated`) VALUES (?id,?device,?repair,?sn,?load,?power,?radix,?energy_balance,?mutual,?remark,?created,?created)";
	private final static String CREATE_LOG = "INSERT INTO `logs` (`id`,`user`,`name`,`command`,`status`,`time`,`parameter`,`remark`,`created`) VALUES (UUID(),?user,?name,?command,?status,?time,?parameter,?remark,NOW())";
	private final static String CREATE_NOTICE = "INSERT INTO `notice` (`id`,`device`,`user`,`content`) VALUES(UUID(),?device,?user,?content)";
	private final static String CREATE_FEEDBACK = "INSERT INTO `feedback` (`id`,`user`,`content`,`option`,`img_url`) VALUES(UUID(),?user,?content,?option,?img_url)";
	private final static String CREATE_SENCE = "INSERT INTO `sences` (`id`,`name`,`remark`,`created`,`updated`) VALUES (?id,?name,?remark,?created,?created)";
	private final static String CREATE_SENCE_DEVICE = "INSERT INTO `sence_devices` (`sence`,`device`,`switch_status`,`feature_index`,`feature_value`) VALUES (?sence,?device,?switch_status,?feature_index,?feature_value)";
	
	private final static String UPDATE_USER = "UPDATE `users` SET `zone`=?zone,`name`=?name,`password`=?password,`enable`=?enable,`realname`=?realname,`nickname`=?nickname,`mobile`=?mobile,`phone`=?phone,`email`=?email,`remark`=?remark,`updated`=?updated WHERE `id`=?id";
	private final static String DELETE_USER_ROLES = "DELETE FROM `user_roles` WHERE `user`=?user";
	private final static String UPDATE_ROLE = "UPDATE `roles` SET `name`=?name,`remark`=?remark,`updated`=?updated WHERE `id`=?id";
	private final static String DELETE_ROLE_POWER = "DELETE FROM `role_powers` WHERE `role`=?role";
	private final static String UPDATE_ZONE = "UPDATE `zones` SET `name`=?name,`parent`=?parent,`remark`=?remark,`updated`=?updated WHERE `id`=?id";
	private final static String UPDATE_TASK = "UPDATE `tasks` SET `name`=?name,`start`=?start,`stop`=?stop,`month`=?month,`week`=?week,`day`=?day,`interval`=?interval,`repeat`=?repeat,`read_type`=?read_type,`write_type`=?write_type,`read_feature`=?read_feature,`write_feature`=?write_feature,`limit_lower`=?limit_lower,`limit_upper`=?limit_upper,`feed`=?feed,`feed_lower`=?feed_lower,`feed_upper`=?feed_upper,`role`=?role,`enable`=?enable,`remark`=?remark,`updated`=?updated WHERE `id`=?id";
	private final static String DELETE_TASK_DEVICES = "DELETE FROM `task_devices` WHERE `task`=?task";
	private final static String UPDATE_DEVICE = "UPDATE `devices` SET `zone`=?zone,`relay`=?relay,`owner`=?owner,`vendor`=?vendor,`kind`=?kind,`link`=?link,`use`=?use,`sn`=?sn,`name`=?name,`number`=?number,`username`=?username,`password`=?password,`network_ip`=?network_ip,`network_port`=?network_port,`serial_port`=?serial_port,`serial_baud_rate`=?serial_baud_rate,`load`=?load,`power`=?power,`mutual`=?mutual,`delay`=?delay,`address`=?address,`installed`=?installed,`produced`=?produced,`longitude`=?longitude,`latitude`=?latitude,`altitude`=?altitude,`phase_check`=?phase_check,`phase_power`=?phase_power,`notice`=?notice,`detect`=?detect,`remark`=?remark,`updated`=?updated WHERE `id`=?id";
	private final static String UPDATE_MAINTAIN = "UPDATE `maintains` SET `device`=?device,`repair`=?repair,`sn`=?sn,`load`=?load,`power`=?power,`radix`=?radix,`energy_balance`=?energy_balance,`mutual`=?mutual,`remark`=?remark,`updated`=?updated WHERE `id`=?id";
	private final static String UPLOAD_USER_ICON = "UPDATE `users` SET `icon_url`=?icon_url WHERE `id`=?id";
	private final static String UPDATE_SENCE = "UPDATE `sences` SET `name`=?name,`switch_status`=?switch_status,`remark`=?remark,`updated`=?updated WHERE `id`=?id";
	private final static String DELETE_SENCE_DEVICES = "DELETE FROM `sence_devices` WHERE `sence`=?sence"; 
	private final static String UPDATE_SENCE_STATUS = "UPDATE `sences` SET `switch_status`=?swicth_status WHERE `id`=?id";
	
	private final static String DELETE_USER = "DELETE FROM `users` WHERE `id`=?id";
	private final static String DELETE_ROLE = "DELETE FROM `roles` WHERE `id`=?id";
	private final static String DELETE_ZONE = "DELETE FROM `zones` WHERE `id`=?id";
	private final static String DELETE_TASK = "DELETE FROM `tasks` WHERE `id`=?id";
	private final static String DELETE_DEVICE = "DELETE FROM `devices` WHERE `id`=?id";
	private final static String DELETE_MAINTAIN = "DELETE FROM `maintains` WHERE `id`=?id";
	private final static String DELETE_SENCE = "DELETE FROM `sences` WHERE `id`=?id";

	public void refresh(Servo s) {
		NSQL sql1 = NSQL.get(SELECT_DEVICES);
		NSQL sql2 = NSQL.get(SELECT_TASKS);
		NSQL sql3 = NSQL.get(SELECT_ZONES);
		NSQL sql4 = NSQL.get(SELECT_USERS);
		NSQL sql5 = NSQL.get(SELECT_USER_ROLES);
		NSQL sql6 = NSQL.get(SELECT_ROLES);
		NSQL sql7 = NSQL.get(SELECT_ROLE_POWERS);
		NSQL sql8 = NSQL.get(SELECT_TASK_DEVICES);
		NSQL sql9 = NSQL.get(SELECT_SENCE);
		NSQL sql10 = NSQL.get(SELECT_SENCE_DEVICE);
		

		Connection connection = dbc.get();
		// DEVICE
		try (PreparedStatement ps = connection.prepareStatement(sql1.getSql())) {
			sql1.setParameter(ps, "updated", null);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				Device device = Device.instance(Vendor.valueOf(rs.getInt("vendor")), Kind.valueOf(rs.getInt("kind")));
				device.setId(rs.getString("id"));
				device.setZoneId(rs.getString("zone"));
				device.setRelayId(rs.getString("relay"));
				device.setOwnerId(rs.getString("owner"));
				device.setVendor(Vendor.valueOf(rs.getInt("vendor")));
				device.setKind(Kind.valueOf(rs.getInt("kind")));
				device.setLink(Link.valueOf(rs.getInt("link")));
				device.setUse(Use.valueOf(rs.getInt("use")));
				device.setSn(rs.getString("sn"));
				device.setName(rs.getString("name"));
				device.setNumber(rs.getString("number"));
				device.setUsername(rs.getString("username"));
				device.setPassword(rs.getString("password"));
				device.setNetworkIp(rs.getString("network_ip"));
				device.setNetworkPort(rs.getInt("network_port"));
				device.setSerialPort(rs.getString("serial_port"));
				device.setSerialBaudRate(rs.getInt("serial_baud_rate"));
				device.setLoad(rs.getInt("load"));
				device.setPower(rs.getInt("power"));
				device.setMutual(rs.getFloat("mutual"));
				device.setDelay(rs.getInt("delay"));
				device.setAddress(rs.getString("address"));
				device.setInstalled(rs.getTimestamp("installed"));
				device.setProduced(rs.getTimestamp("produced"));
				device.setLongitude(rs.getDouble("longitude"));
				device.setLatitude(rs.getDouble("latitude"));
				device.setAltitude(rs.getFloat("altitude"));
				device.setPhaseCheck(rs.getInt("phase_check"));
				device.setPhasePower(rs.getInt("phase_power"));
				device.setNotice(rs.getBoolean("notice"));
				device.setDetect(rs.getBoolean("detect"));
				device.setRemark(rs.getString("remark"));
				device.setCreated(rs.getTimestamp("created"));
				device.setUpdated(rs.getTimestamp("updated"));
				s.add(device);
			}
		} catch (SQLException ex) {
			Log.error(ex);
		}
		// TASK
		try (PreparedStatement ps = connection.prepareStatement(sql2.getSql());
				PreparedStatement ps2 = connection.prepareStatement(sql8.getSql());
				PreparedStatement ps3 = connection.prepareStatement(sql8.getSql());) {
			sql2.setParameter(ps, "updated", null);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				Task task = new Task();
				task.setId(rs.getString("id"));
				task.setName(rs.getString("name"));
				task.setStart(rs.getTimestamp("start"));
				task.setStop(rs.getTimestamp("stop"));
				task.setMonth(rs.getInt("month"));
				task.setWeek(rs.getInt("week"));
				task.setDay(rs.getInt("day"));
				task.setInterval(rs.getInt("interval"));
				task.setRepeat(rs.getInt("repeat"));
				task.setReadKind(Kind.valueOf(rs.getInt("read_type")));
				task.setWriteKind(Kind.valueOf(rs.getInt("write_type")));
				task.setReadFeature(rs.getInt("read_feature"));
				task.setWriteFeature(rs.getInt("write_feature"));
				task.setLimitLower(rs.getInt("limit_lower"));
				task.setLimitUpper(rs.getInt("limit_upper"));
				task.setFeed(rs.getInt("feed"));
				task.setFeedLower(rs.getInt("feed_lower"));
				task.setFeedUpper(rs.getInt("feed_upper"));
				task.setRoleId(rs.getString("role"));
				task.setEnable(rs.getBoolean("enable"));
				task.setRemark(rs.getString("remark"));
				task.setCreated(rs.getTimestamp("created"));
				task.setUpdated(rs.getTimestamp("updated"));
				// 添加检测设备
				sql8.setParameter(ps2, "task", task.getId());
				sql8.setParameter(ps2, "rw", 0);
				ResultSet rs2 = ps2.executeQuery();
				while (rs2.next()) {
					task.addReadDeviceById(rs2.getString("device"));
				}
				// 添加控制设备
				sql8.setParameter(ps3, "task", task.getId());
				sql8.setParameter(ps3, "rw", 1);
				ResultSet rs3 = ps3.executeQuery();
				while (rs3.next()) {
					task.addWriteDeviceById(rs3.getString("device"));
				}
				s.add(task);
			}

		} catch (SQLException ex) {
			Log.error(ex);
		}
		// ZONE
		try (PreparedStatement ps = connection.prepareStatement(sql3.getSql())) {
			sql3.setParameter(ps, "updated", null);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				Zone zone = new Zone();
				zone.setId(rs.getString("id"));
				zone.setName(rs.getString("name"));
				zone.setParentId(rs.getString("parent"));
				zone.setRemark(rs.getString("remark"));
				zone.setCreated(rs.getTimestamp("created"));
				zone.setUpdated(rs.getTimestamp("updated"));
				s.add(zone);
			}
		} catch (SQLException ex) {
			Log.error(ex);
		}
		// USER
		try (PreparedStatement ps1 = connection.prepareStatement(sql4.getSql());
				PreparedStatement ps2 = connection.prepareStatement(sql5.getSql());) {

			sql4.setParameter(ps1, "updated", null);
			ResultSet rs1 = ps1.executeQuery();
			while (rs1.next()) {
				User user = new User();
				user.setId(rs1.getString("id"));
				user.setZoneId(rs1.getString("zone"));
				user.setName(rs1.getString("name"));
				user.setEnable(rs1.getBoolean("enable"));
				user.setPassword(rs1.getString("password"));
				user.setRealname(rs1.getString("realname"));
				user.setNickname(rs1.getString("nickname"));
				user.setMobile(rs1.getString("mobile"));
				user.setPhone(rs1.getString("phone"));
				user.setEmail(rs1.getString("email"));
				user.setRemark(rs1.getString("remark"));
				user.setCreated(rs1.getTimestamp("created"));
				user.setUpdated(rs1.getTimestamp("updated"));

				sql5.setParameter(ps2, "user", user.getId());
				ResultSet rs2 = ps2.executeQuery();
				while (rs2.next()) {
					user.addRole(rs2.getString("role"));
				}

				s.add(user);
			}
		} catch (SQLException ex) {
			Log.error(ex);
		}
		// ROLE
		try (PreparedStatement ps1 = connection.prepareStatement(sql6.getSql());
				PreparedStatement ps2 = connection.prepareStatement(sql7.getSql());) {

			sql6.setParameter(ps1, "updated", null);
			ResultSet rs2 = ps1.executeQuery();
			while (rs2.next()) {
				Role role = new Role();
				role.setId(rs2.getString("id"));
				role.setName(rs2.getString("name"));
				role.setRemark(rs2.getString("remark"));
				role.setCreated(rs2.getTimestamp("created"));
				role.setUpdated(rs2.getTimestamp("updated"));

				sql7.setParameter(ps2, "role", role.getId());
				ResultSet rs1 = ps2.executeQuery();
				while (rs1.next()) {
					Integer c = rs1.getInt("command");
					if (c != null)
						role.addCommand(c);
				}
				s.add(role);
			}
		} catch (SQLException ex) {
			Log.error(ex);
		}
		
		//SENCE
		try (PreparedStatement ps1 = connection.prepareStatement(sql9.getSql());
				PreparedStatement ps2 = connection.prepareStatement(sql10.getSql());) {

			sql6.setParameter(ps1, "updated", null);
			ResultSet rs = ps1.executeQuery();
			while (rs.next()) {
				Sence sence = new Sence();
				sence.setId(rs.getString("id"));
				sence.setName(rs.getString("name"));
				sence.setRemark(rs.getString("remark"));
				sence.setCreated(rs.getTimestamp("created"));
				sence.setUpdated(rs.getTimestamp("updated"));
				sence.setSwitchStatu(rs.getBoolean("switch_status"));
				sql10.setParameter(ps2, "sence", sence.getId());
				ResultSet rs1 = ps2.executeQuery();
				while(rs1.next()){
					SenceDevice senceDevice = new SenceDevice();
					senceDevice.setDeviceId(rs1.getString("device"));
					senceDevice.setSwitchStatus(rs1.getBoolean("switch_status"));
					senceDevice.setFeatureIndex(rs1.getInt("feature_index"));
					senceDevice.setFeatureValue(rs1.getInt("feature_value"));
					if(senceDevice.getSwitchStatus()){
						sence.addOpenSenceDevice(senceDevice);
					}else{
						sence.addOffSenceDevice(senceDevice);
					}
				}
				s.add(sence);
			}
		} catch (SQLException ex) {
			Log.error(ex);
		}
		
		
		dbc.put(connection);
	}

	@Override
	public Set<String> SelectDeletes(Date d) {
		NSQL sql = NSQL.get(SELECT_DELETES);

		Set<String> items = new HashSet<String>();
		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql())) {
			sql.setParameter(ps, "created", d);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				items.add(rs.getString("id"));
			}
		} catch (SQLException ex) {
			Log.error(ex);
		}
		return items;
	}

	@Override
	public List<Device> QueryDeviceStatus(Device device, Date begin, Date end) {
		NSQL sql = NSQL.get(QUERY_DEVICE_STATUS);

		List<Device> items = new ArrayList<Device>();
		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql())) {
			sql.setParameter(ps, "device", device.getId());
			sql.setParameter(ps, "begin", begin);
			sql.setParameter(ps, "end", end);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				Device d = Device.instance(device.getVendor(), device.getKind());
				d.setId(rs.getString("device"));
				// 借用delay暂存origin
				d.setDelay(rs.getInt("origin"));
				Feature[] fs = d.getFeatures();
				for (int index = 0; index < fs.length; index++) {
					fs[index].setValue(rs.getInt(String.format("s%02d", index + 1)));
				}
				d.setCreated(rs.getTimestamp("created"));
				items.add(d);
			}
		} catch (SQLException ex) {
			Log.error(ex);
		}
		return items;
	}

	@Override
	public List<Maintain> QueryDeviceMaintain(String id, Date begin, Date end) {
		NSQL sql = NSQL.get(QUERY_DEVICE_MAINTAIN);

		List<Maintain> items = new ArrayList<Maintain>();
		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql())) {
			sql.setParameter(ps, "device", id);
			sql.setParameter(ps, "begin", begin);
			sql.setParameter(ps, "end", end);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				Maintain s = new Maintain();
				s.setId(rs.getString("id"));
				s.setDeviceId(rs.getString("device"));
				s.setRepair(Repair.valueOf(rs.getInt("repair")));
				s.setSn(rs.getString("sn"));
				s.setLoad(rs.getInt("load"));
				s.setPower(rs.getInt("power"));
				s.setRadix(rs.getInt("radix"));
				s.setEnergyBalance(rs.getInt("energy_balance"));
				s.setMutual(rs.getInt("mutual"));
				s.setRemark(rs.getString("remark"));
				s.setUpdated(rs.getTimestamp("updated"));
				s.setCreated(rs.getTimestamp("created"));
				items.add(s);
			}
		} catch (SQLException ex) {
			Log.error(ex);
		}
		return items;
	}

	@Override
	public List<ULog> QueryLog(String id, Date begin, Date end) {
		NSQL sql = NSQL.get(QUERY_LOG);

		List<ULog> items = new ArrayList<ULog>();
		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql())) {
			if (Tool.isEmpty(id))
				sql.setParameter(ps, "user", null);
			else
				sql.setParameter(ps, "user", id);
			sql.setParameter(ps, "begin", begin);
			sql.setParameter(ps, "end", end);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				ULog s = new ULog();
				s.setId(rs.getString("id"));
				s.setUserId(rs.getString("user"));
				s.setName(rs.getString("name"));
				s.setCommand(rs.getInt("command"));
				s.setStatus(rs.getInt("status"));
				s.setParameter(rs.getString("parameter"));
				s.setRemark(rs.getString("remark"));
				s.setCreated(rs.getTimestamp("created"));
				items.add(s);
			}
		} catch (SQLException ex) {
			Log.error(ex);
		}
		return items;
	}

	@Override
	public boolean MoveZone(Zone z) {
		NSQL sql1 = NSQL.get(MOVE_ZONE);

		Connection connection = dbc.get();
		try (PreparedStatement s1 = connection.prepareStatement(sql1.getSql());) {
			sql1.setParameter(s1, "id", z.getId());
			sql1.setParameter(s1, "parent", z.getParentId());
			sql1.setParameter(s1, "updated", z.getUpdated());
			return s1.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean MoveDevice(Device d) {
		NSQL sql1 = NSQL.get(MOVE_DEVICE);

		Connection connection = dbc.get();
		try (PreparedStatement s1 = connection.prepareStatement(sql1.getSql());) {
			sql1.setParameter(s1, "id", d.getId());
			sql1.setParameter(s1, "zone", d.getZoneId());
			sql1.setParameter(s1, "relay", d.getRelayId());
			sql1.setParameter(s1, "updated", d.getUpdated());
			return s1.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean MovePosition(Device d) {
		NSQL sql1 = NSQL.get(MOVE_POSITION);

		Connection connection = dbc.get();
		try (PreparedStatement s1 = connection.prepareStatement(sql1.getSql());) {
			sql1.setParameter(s1, "id", d.getId());
			sql1.setParameter(s1, "longitude", d.getLongitude());
			sql1.setParameter(s1, "latitude", d.getLatitude());
			sql1.setParameter(s1, "altitude", d.getAltitude());
			sql1.setParameter(s1, "updated", d.getUpdated());
			return s1.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean CreateUser(User u) {
		NSQL sql1 = NSQL.get(CREATE_USER);
		NSQL sql2 = NSQL.get(CREATE_USER_ROLES);

		Connection connection = dbc.get();
		try {
			connection.setAutoCommit(false);
			try (PreparedStatement s1 = connection.prepareStatement(sql1.getSql());
					PreparedStatement s2 = connection.prepareStatement(sql2.getSql());) {
				sql1.setParameter(s1, "id", u.getId());
				sql1.setParameter(s1, "zone", u.getZoneId());
				sql1.setParameter(s1, "name", u.getName());
				sql1.setParameter(s1, "password", u.getPassword());
				sql1.setParameter(s1, "enable", u.getEnable());
				sql1.setParameter(s1, "nickname",u.getNickname());
				sql1.setParameter(s1, "realname", u.getRealname());
				sql1.setParameter(s1, "mobile", u.getMobile());
				sql1.setParameter(s1, "phone", u.getPhone());
				sql1.setParameter(s1, "email", u.getEmail());
				sql1.setParameter(s1, "remark", u.getRemark());
				sql1.setParameter(s1, "created", u.getCreated());
				if (s1.executeUpdate() == 1) {
					for (String role_id : u.getRoleId()) {
						sql2.setParameter(s2, "user", u.getId());
						sql2.setParameter(s2, "role", role_id);
						sql2.setParameter(s2, "created", u.getCreated());
						s2.executeUpdate();
					}
					connection.commit();
					return true;
				}
				connection.rollback();
				return false;
			} catch (SQLException ex) {
				connection.rollback();
				throw ex;
			}
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean CreateRole(Role r) {
		NSQL sql1 = NSQL.get(CREATE_ROLE);
		NSQL sql2 = NSQL.get(CREATE_ROLE_POWER);

		Connection connection = dbc.get();
		try {
			connection.setAutoCommit(false);
			try (PreparedStatement s1 = connection.prepareStatement(sql1.getSql());
					PreparedStatement s2 = connection.prepareStatement(sql2.getSql())) {
				sql1.setParameter(s1, "id", r.getId());
				sql1.setParameter(s1, "name", r.getName());
				sql1.setParameter(s1, "remark", r.getRemark());
				sql1.setParameter(s1, "created", r.getCreated());
				if (s1.executeUpdate() == 1) {
					for (Integer command : r.getCommands()) {
						if (command != null) {
							sql2.setParameter(s2, "role", r.getId());
							sql2.setParameter(s2, "command", command);
							sql2.setParameter(s2, "created", r.getCreated());
							s2.executeUpdate();
						}
					}
					connection.commit();
					return true;
				}
				return false;
			} catch (SQLException ex) {
				connection.rollback();
				throw ex;
			}
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean CreateZone(Zone z) {
		NSQL sql = NSQL.get(CREATE_ZONE);

		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql());) {
			sql.setParameter(ps, "id", z.getId());
			sql.setParameter(ps, "parent", z.getParentId());
			sql.setParameter(ps, "name", z.getName());
			sql.setParameter(ps, "remark", z.getRemark());
			sql.setParameter(ps, "created", z.getCreated());
			return ps.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean CreateTask(Task t) {
		NSQL sql = NSQL.get(CREATE_TASK);
		NSQL sql2 = NSQL.get(CREATE_TASK_DEVICES);

		Connection connection = dbc.get();
		try {
			connection.setAutoCommit(false);
			try (PreparedStatement ps = connection.prepareStatement(sql.getSql());
					PreparedStatement ps2 = connection.prepareStatement(sql2.getSql());) {
				sql.setParameter(ps, "id", t.getId());
				sql.setParameter(ps, "name", t.getName());
				sql.setParameter(ps, "start", t.getStart());
				sql.setParameter(ps, "stop", t.getStop());
				sql.setParameter(ps, "month", t.getMonth());
				sql.setParameter(ps, "week", t.getWeek());
				sql.setParameter(ps, "day", t.getDay());
				sql.setParameter(ps, "interval", t.getInterval());
				sql.setParameter(ps, "repeat", t.getRepeat());
				if (t.getReadKind() != null)
					sql.setParameter(ps, "read_type", t.getReadKind().getValue());
				if (t.getWriteKind() != null)
					sql.setParameter(ps, "write_type", t.getWriteKind().getValue());
				sql.setParameter(ps, "read_feature", t.getReadFeature());
				sql.setParameter(ps, "write_feature", t.getWriteFeature());
				sql.setParameter(ps, "limit_lower", t.getLimitLower());
				sql.setParameter(ps, "limit_upper", t.getLimitUpper());
				sql.setParameter(ps, "feed", t.getFeed());
				sql.setParameter(ps, "feed_lower", t.getFeedLower());
				sql.setParameter(ps, "feed_upper", t.getFeedUpper());
				sql.setParameter(ps, "role", t.getRoleId());
				sql.setParameter(ps, "enable", t.getEnable());
				sql.setParameter(ps, "remark", t.getRemark());
				sql.setParameter(ps, "created", t.getCreated());
				sql.setParameter(ps, "updated", t.getUpdated());
				
				if (ps.executeUpdate() == 1) {
					if (t.getReadDeviceIds() != null) {
						for (String deviceId : t.getReadDeviceIds()) {
							sql2.setParameter(ps2, "task", t.getId());
							sql2.setParameter(ps2, "device", deviceId);
							sql2.setParameter(ps2, "rw", 0);
							sql2.setParameter(ps2, "created", new Date());
							ps2.executeUpdate();
						}
					}

					if (t.getWriteDeviceIds() != null) {
						for (String deviceId : t.getWriteDeviceIds()) {
							sql2.setParameter(ps2, "task", t.getId());
							sql2.setParameter(ps2, "device", deviceId);
							sql2.setParameter(ps2, "rw", 1);
							sql2.setParameter(ps2, "created", new Date());
							ps2.executeUpdate();
						}
					}
					connection.commit();
					return true;
				}
				Log.debug(sql.getSql());
				connection.rollback();
				return false;
			} catch (SQLException ex) {
				Log.error(ex);
				connection.rollback();
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			dbc.put(connection);
		}
		return false;
	}

	@Override
	public boolean CreateDevice(Device d) {
		NSQL sql = NSQL.get(CREATE_DEVICE);

		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql())) {
			sql.setParameter(ps, "id", d.getId());
			sql.setParameter(ps, "zone", d.getZoneId());
			sql.setParameter(ps, "relay", d.getRelayId());
			sql.setParameter(ps, "owner", d.getOwnerId());
			sql.setParameter(ps, "vendor", d.getVendor().getValue());
			sql.setParameter(ps, "kind", d.getKind().getValue());
			sql.setParameter(ps, "link", d.getLink().getValue());
			sql.setParameter(ps, "use", d.getUse().getValue());
			sql.setParameter(ps, "sn", d.getSn());
			sql.setParameter(ps, "name", d.getName());
			sql.setParameter(ps, "number", d.getNumber());
			sql.setParameter(ps, "username", d.getUsername());
			sql.setParameter(ps, "password", d.getPassword());
			sql.setParameter(ps, "network_ip", d.getNetworkIp());
			sql.setParameter(ps, "network_port", d.getNetworkPort());
			sql.setParameter(ps, "serial_port", d.getSerialPort());
			sql.setParameter(ps, "serial_baud_rate", d.getSerialBaudRate());
			sql.setParameter(ps, "load", d.getLoad());
			sql.setParameter(ps, "power", d.getPower());
			sql.setParameter(ps, "mutual", d.getMutual());
			sql.setParameter(ps, "delay", d.getDelay());
			sql.setParameter(ps, "address", d.getAddress());
			sql.setParameter(ps, "installed", d.getInstalled());
			sql.setParameter(ps, "produced", d.getProduced());
			sql.setParameter(ps, "longitude", d.getLongitude());
			sql.setParameter(ps, "latitude", d.getLatitude());
			sql.setParameter(ps, "altitude", d.getAltitude());
			sql.setParameter(ps, "phase_check", d.getPhaseCheck());
			sql.setParameter(ps, "phase_power", d.getPhasePower());
			sql.setParameter(ps, "notice", d.getNotice());
			sql.setParameter(ps, "detect", d.getDetect());
			sql.setParameter(ps, "remark", d.getRemark());
			sql.setParameter(ps, "created", d.getCreated());
			return ps.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean CreateDeviceStatus(Device d, Origin o) {
		NSQL sql = NSQL.get(CREATE_DEVICE_STATUS);

		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql())) {
			sql.setParameter(ps, "id", UUID.randomUUID().toString());
			sql.setParameter(ps, "device", d.getId());
			sql.setParameter(ps, "origin", o.getValue());
			int value = 0;
			for (int index = 0; index < 64; index++) {
				if (index < d.getFeatureCount())
					value = d.getFeature(index).getValue();
				else
					value = 0;
				sql.setParameter(ps, String.format("s%02d", index + 1), value);
			}
			return ps.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean CreateMaintain(Maintain m) {
		NSQL sql = NSQL.get(CREATE_MAINTAIN);

		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql())) {
			sql.setParameter(ps, "id", m.getId());
			sql.setParameter(ps, "device", m.getDeviceId());
			sql.setParameter(ps, "repair", m.getRepair().getValue());
			sql.setParameter(ps, "sn", m.getSn());
			sql.setParameter(ps, "load", m.getLoad());
			sql.setParameter(ps, "power", m.getPower());
			sql.setParameter(ps, "radix", m.getRadix());
			sql.setParameter(ps, "energy_balance", m.getEnergyBalance());
			sql.setParameter(ps, "mutual", m.getMutual());
			sql.setParameter(ps, "remark", m.getRemark());
			sql.setParameter(ps, "created", m.getCreated());
			return ps.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean CreateLog(User u, Message q, Message p, long time) {
		NSQL sql = NSQL.get(CREATE_LOG);

		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql())) {
			if (u == null)
				sql.setParameter(ps, "user", null);
			else
				sql.setParameter(ps, "user", u.getId());
			sql.setParameter(ps, "name", "");
			sql.setParameter(ps, "command", q.getActionCase().getNumber());
			if (p != null)
				sql.setParameter(ps, "status", p.getResultValue());
			sql.setParameter(ps, "time", time);
			if(q.toString().length()>1000){
				sql.setParameter(ps, "parameter", "data is too long");
			}else{
				sql.setParameter(ps, "parameter", q.toString());
			}
			sql.setParameter(ps, "remark", q.getError());
			return ps.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}
	
	@Override
	public boolean CreateNotice(Notice u) {
		NSQL sql = NSQL.get(CREATE_NOTICE);
		
		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql())) {
			sql.setParameter(ps, "device", u.getDeviceId());
			sql.setParameter(ps, "user", u.getUserId());
			sql.setParameter(ps, "content", u.getContent());
			return ps.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}
	
	

	@Override
	public boolean CreateFeedback(FeedBack f) {
		NSQL sql = NSQL.get(CREATE_FEEDBACK);
		
		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql())) {
			sql.setParameter(ps, "user", f.getUserId());
			sql.setParameter(ps, "content", f.getContent());
			sql.setParameter(ps, "option", f.getOption().getValue());
			sql.setParameter(ps, "img_url", f.getImgUrl());
			return ps.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean UpdateUser(User u) {
		NSQL sql1 = NSQL.get(UPDATE_USER);
		NSQL sql2 = NSQL.get(DELETE_USER_ROLES);
		NSQL sql3 = NSQL.get(CREATE_USER_ROLES);

		Connection connection = dbc.get();
		try {
			connection.setAutoCommit(false);
			try (PreparedStatement s1 = connection.prepareStatement(sql1.getSql());
					PreparedStatement s2 = connection.prepareStatement(sql2.getSql());
					PreparedStatement s3 = connection.prepareStatement(sql3.getSql());) {
				sql1.setParameter(s1, "id", u.getId());
				sql1.setParameter(s1, "zone", u.getZoneId());
				sql1.setParameter(s1, "name", u.getName());
				sql1.setParameter(s1, "password", u.getPassword());
				sql1.setParameter(s1, "enable", u.getEnable());
				sql1.setParameter(s1, "realname", u.getRealname());
				sql1.setParameter(s1, "nickname", u.getNickname());
				sql1.setParameter(s1, "mobile", u.getMobile());
				sql1.setParameter(s1, "phone", u.getPhone());
				sql1.setParameter(s1, "email", u.getEmail());
				sql1.setParameter(s1, "remark", u.getRemark());
				sql1.setParameter(s1, "updated", u.getUpdated());
				if (s1.executeUpdate() == 1) {
					sql2.setParameter(s2, "user", u.getId());
					if (s2.executeUpdate() >= 0) {
						for (String role_id : u.getRoleId()) {
							sql3.setParameter(s3, "user", u.getId());
							sql3.setParameter(s3, "role", role_id);
							sql3.setParameter(s3, "created", u.getUpdated());
							s3.executeUpdate();
						}
						connection.commit();
						return true;
					}
				}
				connection.rollback();
				return false;
			} catch (SQLException ex) {
				connection.rollback();
				throw ex;
			}
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean UpdateRole(Role r) {
		NSQL sql1 = NSQL.get(UPDATE_ROLE);
		NSQL sql2 = NSQL.get(DELETE_ROLE_POWER);
		NSQL sql3 = NSQL.get(CREATE_ROLE_POWER);

		Connection connection = dbc.get();
		try {
			connection.setAutoCommit(false);
			try (PreparedStatement s1 = connection.prepareStatement(sql1.getSql());
					PreparedStatement s2 = connection.prepareStatement(sql2.getSql());
					PreparedStatement s3 = connection.prepareStatement(sql3.getSql());) {
				sql1.setParameter(s1, "id", r.getId());
				sql1.setParameter(s1, "name", r.getName());
				sql1.setParameter(s1, "remark", r.getRemark());
				sql1.setParameter(s1, "updated", r.getUpdated());
				if (s1.executeUpdate() == 1) {
					sql2.setParameter(s2, "role", r.getId());
					if (s2.executeUpdate() >= 0) {
						for (Integer command : r.getCommands()) {
							sql3.setParameter(s3, "role", r.getId());
							sql3.setParameter(s3, "command", command);
							sql3.setParameter(s3, "created", r.getUpdated());
							s3.executeUpdate();
						}
						connection.commit();
						return true;
					}
				}
				connection.rollback();
				return false;
			} catch (SQLException ex) {
				connection.rollback();
				throw ex;
			}
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean UpdateZone(Zone z) {
		NSQL sql1 = NSQL.get(UPDATE_ZONE);

		Connection connection = dbc.get();
		try (PreparedStatement s1 = connection.prepareStatement(sql1.getSql());) {
			sql1.setParameter(s1, "id", z.getId());
			sql1.setParameter(s1, "name", z.getName());
			sql1.setParameter(s1, "parent", z.getParentId());
			sql1.setParameter(s1, "remark", z.getRemark());
			sql1.setParameter(s1, "updated", z.getUpdated());
			return s1.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean UpdateTask(Task t) {
		NSQL sql1 = NSQL.get(UPDATE_TASK);
		NSQL sql2 = NSQL.get(DELETE_TASK_DEVICES);
		NSQL sql3 = NSQL.get(CREATE_TASK_DEVICES);

		Connection connection = dbc.get();
		try {
			connection.setAutoCommit(false);
			try (PreparedStatement s1 = connection.prepareStatement(sql1.getSql());
					PreparedStatement s2 = connection.prepareStatement(sql2.getSql());
					PreparedStatement s3 = connection.prepareStatement(sql3.getSql());) {
				sql1.setParameter(s1, "id", t.getId());
				sql1.setParameter(s1, "name", t.getName());
				sql1.setParameter(s1, "start", t.getStart());
				sql1.setParameter(s1, "stop", t.getStop());
				sql1.setParameter(s1, "month", t.getMonth());
				sql1.setParameter(s1, "week", t.getWeek());
				sql1.setParameter(s1, "day", t.getDay());
				sql1.setParameter(s1, "interval", t.getInterval());
				sql1.setParameter(s1, "repeat", t.getRepeat());
				sql1.setParameter(s1, "read_type", t.getReadKind().getValue());
				sql1.setParameter(s1, "write_type", t.getWriteKind().getValue());
				sql1.setParameter(s1, "read_feature", t.getReadFeature());
				sql1.setParameter(s1, "write_feature", t.getWriteFeature());
				sql1.setParameter(s1, "limit_lower", t.getLimitLower());
				sql1.setParameter(s1, "limit_upper", t.getLimitUpper());
				sql1.setParameter(s1, "feed", t.getFeed());
				sql1.setParameter(s1, "feed_upper", t.getFeedUpper());
				sql1.setParameter(s1, "feed_lower", t.getFeedLower());
				sql1.setParameter(s1, "role", t.getRoleId());
				sql1.setParameter(s1, "enable", t.getEnable());
				sql1.setParameter(s1, "remark", t.getRemark());
				sql1.setParameter(s1, "updated", t.getUpdated());
				if (s1.executeUpdate() == 1) {
					sql2.setParameter(s2, "task", t.getId());
					if( s2.executeUpdate()>=0) {
						Log.debug("one");
						if(t.getReadDeviceIds()!=null) {
							Log.debug("two");
							for (String deviceId : t.getReadDeviceIds()) {
								sql3.setParameter(s3, "task", t.getId());
								sql3.setParameter(s3, "device", deviceId);
								sql3.setParameter(s3, "rw", 0);
								sql3.setParameter(s3, "created", new Date());
								s3.executeUpdate();
							}
						}
						
						if(t.getWriteDeviceIds()!=null) {
							for (String deviceId : t.getWriteDeviceIds()) {
								sql3.setParameter(s3, "task", t.getId());
								sql3.setParameter(s3, "device", deviceId);
								sql3.setParameter(s3, "rw", 1);
								sql3.setParameter(s3, "created", new Date());
								s3.executeUpdate();
							}
						}
					}
					connection.commit();
					return true;
				}
				connection.rollback();
				return false;
			} catch (SQLException ex) {
				connection.rollback();
				throw ex;
			}
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean UpdateDevice(Device d) {
		NSQL sql = NSQL.get(UPDATE_DEVICE);

		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql());) {
			sql.setParameter(ps, "id", d.getId());
			sql.setParameter(ps, "zone", d.getZoneId());
			sql.setParameter(ps, "relay", d.getRelayId());
			sql.setParameter(ps, "owner", d.getOwnerId());
			sql.setParameter(ps, "vendor", d.getVendor().getValue());
			sql.setParameter(ps, "kind", d.getKind().getValue());
			sql.setParameter(ps, "link", d.getLink().getValue());
			sql.setParameter(ps, "use", d.getUse().getValue());
			sql.setParameter(ps, "sn", d.getSn());
			sql.setParameter(ps, "name", d.getName());
			sql.setParameter(ps, "number", d.getNumber());
			sql.setParameter(ps, "username", d.getUsername());
			sql.setParameter(ps, "password", d.getPassword());
			sql.setParameter(ps, "network_ip", d.getNetworkIp());
			sql.setParameter(ps, "network_port", d.getNetworkPort());
			sql.setParameter(ps, "serial_port", d.getSerialPort());
			sql.setParameter(ps, "serial_baud_rate", d.getSerialBaudRate());
			sql.setParameter(ps, "load", d.getLoad());
			sql.setParameter(ps, "power", d.getPower());
			sql.setParameter(ps, "mutual", d.getMutual());
			sql.setParameter(ps, "delay", d.getDelay());
			sql.setParameter(ps, "address", d.getAddress());
			sql.setParameter(ps, "installed", d.getInstalled());
			sql.setParameter(ps, "produced", d.getProduced());
			sql.setParameter(ps, "longitude", d.getLongitude());
			sql.setParameter(ps, "latitude", d.getLatitude());
			sql.setParameter(ps, "altitude", d.getAltitude());
			sql.setParameter(ps, "phase_check", d.getPhaseCheck());
			sql.setParameter(ps, "phase_power", d.getPhasePower());
			sql.setParameter(ps, "notice", d.getNotice());
			sql.setParameter(ps, "detect", d.getDetect());
			sql.setParameter(ps, "remark", d.getRemark());
			sql.setParameter(ps, "updated", d.getUpdated());
			return ps.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean UpdateMaintain(Maintain m) {
		NSQL sql = NSQL.get(UPDATE_MAINTAIN);

		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql());) {
			sql.setParameter(ps, "id", m.getId());
			sql.setParameter(ps, "device", m.getDeviceId());
			sql.setParameter(ps, "repair", m.getRepair().getValue());
			sql.setParameter(ps, "sn", m.getSn());
			sql.setParameter(ps, "load", m.getLoad());
			sql.setParameter(ps, "power", m.getPower());
			sql.setParameter(ps, "radix", m.getRadix());
			sql.setParameter(ps, "energy_balance", m.getEnergyBalance());
			sql.setParameter(ps, "mutual", m.getMutual());
			sql.setParameter(ps, "remark", m.getRemark());
			sql.setParameter(ps, "updated", m.getUpdated());
			return ps.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean DeleteUser(User u) {
		NSQL sql1 = NSQL.get(DELETE_USER);

		Connection connection = dbc.get();
		try (PreparedStatement s1 = connection.prepareStatement(sql1.getSql());) {
			sql1.setParameter(s1, "id", u.getId());
			return s1.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean DeleteRole(Role r) {
		NSQL sql1 = NSQL.get(DELETE_ROLE);

		Connection connection = dbc.get();
		try (PreparedStatement s1 = connection.prepareStatement(sql1.getSql());) {
			sql1.setParameter(s1, "id", r.getId());
			return s1.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean DeleteZone(Zone z) {
		NSQL sql1 = NSQL.get(DELETE_ZONE);

		Connection connection = dbc.get();
		try (PreparedStatement s1 = connection.prepareStatement(sql1.getSql());) {
			sql1.setParameter(s1, "id", z.getId());
			return s1.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean DeleteTask(Task t) {
		NSQL sql1 = NSQL.get(DELETE_TASK);

		Connection connection = dbc.get();
		try (PreparedStatement s1 = connection.prepareStatement(sql1.getSql());) {
			sql1.setParameter(s1, "id", t.getId());
			return s1.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean DeleteMaintain(String id) {
		NSQL sql = NSQL.get(DELETE_MAINTAIN);

		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql());) {
			sql.setParameter(ps, "id", id);
			return ps.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean DeleteDevice(Device u) {
		NSQL sql = NSQL.get(DELETE_DEVICE);

		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql());) {
			sql.setParameter(ps, "id", u.getId());
			return ps.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean UploadUserIcon(User u) {
		NSQL sql = NSQL.get(UPLOAD_USER_ICON);
		
		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql());) {
			sql.setParameter(ps, "id", u.getId());
			sql.setParameter(ps, "icon_url", u.getIconUrl());
			return ps.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public String QueryUserIcon(String id) {
		
		NSQL sql = NSQL.get(QUERY_USER_ICON);
		
		Connection connection = dbc.get();
		try (PreparedStatement ps = connection.prepareStatement(sql.getSql());) {
			sql.setParameter(ps, "id", id);
			ResultSet rs = ps.executeQuery();
			if(rs.next()){
				return rs.getString("icon_url");
			}
		} catch (SQLException ex) {
			Log.error(ex);
			return "";
		} finally {
			dbc.put(connection);
		}
		return "";
	}

	@Override
	public boolean CreateSence(Sence s) {
		NSQL sql = NSQL.get(CREATE_SENCE);
		NSQL sql2 = NSQL.get(CREATE_SENCE_DEVICE);

		Connection connection = dbc.get();
		try {
			connection.setAutoCommit(false);
			try (PreparedStatement ps = connection.prepareStatement(sql.getSql());
					PreparedStatement ps2 = connection.prepareStatement(sql2.getSql());) {
				sql.setParameter(ps, "id", s.getId());
				sql.setParameter(ps, "name", s.getName());
				sql.setParameter(ps, "remark", s.getRemark());
				sql.setParameter(ps, "created", s.getCreated());
				if (ps.executeUpdate() == 1) {
					if (s.getOpenDevices() != null) {
						for (SenceDevice openDevice : s.getOpenDevices()) {
							sql2.setParameter(ps2, "sence", s.getId());
							sql2.setParameter(ps2, "device", openDevice.getDeviceId());
							sql2.setParameter(ps2, "switch_status", openDevice.getSwitchStatus());
							sql2.setParameter(ps2, "feature_index", openDevice.getFeatureIndex());
							sql2.setParameter(ps2, "feature_value", openDevice.getFeatureValue());
							ps2.executeUpdate();
						}
					}
					if (s.getOffDevices() != null) {
						for (SenceDevice offDevice : s.getOffDevices()) {
							sql2.setParameter(ps2, "sence", s.getId());
							sql2.setParameter(ps2, "device", offDevice.getDeviceId());
							sql2.setParameter(ps2, "switch_status", offDevice.getSwitchStatus());
							sql2.setParameter(ps2, "feature_index", offDevice.getFeatureIndex());
							sql2.setParameter(ps2, "feature_value", offDevice.getFeatureValue());
							ps2.executeUpdate();
						}
					}
					
					connection.commit();
					return true;
				}
				Log.debug(sql.getSql());
				connection.rollback();
				return false;
			} catch (SQLException ex) {
				Log.error(ex);
				connection.rollback();
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			dbc.put(connection);
		}
		return false;
	}

	@Override  
	public boolean UpdateSence(Sence s) {
		NSQL sql = NSQL.get(UPDATE_SENCE);
		NSQL sql3 = NSQL.get(DELETE_SENCE_DEVICES);
		NSQL sql2 = NSQL.get(CREATE_SENCE_DEVICE);
		
		Connection connection = dbc.get();
		try {
			connection.setAutoCommit(false);
			try (PreparedStatement ps = connection.prepareStatement(sql.getSql());
					PreparedStatement ps2 = connection.prepareStatement(sql2.getSql());
					PreparedStatement ps3 = connection.prepareStatement(sql3.getSql());) {
				sql.setParameter(ps, "id", s.getId());
				sql.setParameter(ps, "name", s.getName());
				sql.setParameter(ps, "switch_status", s.getSwitchStatu());
				sql.setParameter(ps, "remark", s.getRemark());
				sql.setParameter(ps, "updated", s.getUpdated());
				if (ps.executeUpdate() == 1) {
					/*删除已有的*/
					sql3.setParameter(ps3, "sence", s.getId());
					ps3.executeUpdate();
					if (s.getOpenDevices() != null) {
						for (SenceDevice openDevice : s.getOpenDevices()) {
							sql2.setParameter(ps2, "sence", s.getId());
							sql2.setParameter(ps2, "device", openDevice.getDeviceId());
							sql2.setParameter(ps2, "switch_status", openDevice.getSwitchStatus());
							sql2.setParameter(ps2, "feature_index", openDevice.getFeatureIndex());
							sql2.setParameter(ps2, "feature_value", openDevice.getFeatureValue());
							ps2.executeUpdate();
						}
					}
					if (s.getOffDevices() != null) {
						for (SenceDevice offDevice : s.getOffDevices()) {
							sql2.setParameter(ps2, "sence", s.getId());
							sql2.setParameter(ps2, "device", offDevice.getDeviceId());
							sql2.setParameter(ps2, "switch_status", offDevice.getSwitchStatus());
							sql2.setParameter(ps2, "feature_index", offDevice.getFeatureIndex());
							sql2.setParameter(ps2, "feature_value", offDevice.getFeatureValue());
							ps2.executeUpdate();
						}
					}
					
					connection.commit();
					return true;
				}
				Log.debug(sql.getSql());
				connection.rollback();
				return false;
			} catch (SQLException ex) {
				Log.error(ex);
				connection.rollback();
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			dbc.put(connection);
		}
		return false;
	}

	@Override
	public boolean UpdateSenceStatus(String id,boolean senceStatus) {
		NSQL sql1 = NSQL.get(UPDATE_SENCE_STATUS);

		Connection connection = dbc.get();
		try (PreparedStatement s1 = connection.prepareStatement(sql1.getSql());) {
			sql1.setParameter(s1, "swicth_status", senceStatus);
			sql1.setParameter(s1, "id", id);
			return s1.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}

	@Override
	public boolean DeleteSence(Sence s) {
		NSQL sql1 = NSQL.get(DELETE_SENCE);

		Connection connection = dbc.get();
		try (PreparedStatement s1 = connection.prepareStatement(sql1.getSql());) {
			sql1.setParameter(s1, "id", s.getId());
			return s1.executeUpdate() == 1;
		} catch (SQLException ex) {
			Log.error(ex);
			return false;
		} finally {
			dbc.put(connection);
		}
	}
}