/**
 * 2017年3月28日
 */
package com.kiy.servo.job;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import com.kiy.common.Servo;
import com.kiy.common.Task;
import com.kiy.servo.Config;
import com.kiy.servo.Log;
import com.kiy.servo.data.Data;

/**
 * @author Simon(ZhangXi TEL:13883833982)
 *
 */
public final class Strategy {

	private static Map<Task, Scheduler> schedulers;

	private Strategy() {
	}

	public static void initialize() {
		if (!Config.STRATEGY) {
			Log.info("Strategy disabled");
			return;
		}

		Log.info("Strategy initialize ...");

		schedulers = new ConcurrentHashMap<Task, Scheduler>();

		Servo servo = Data.getServo();
		for (Task t : servo.getTasks()) {
			if(t.getEnable()) {
				create(t, false);
			}
		}

		Log.info("Strategy initialized task count " + schedulers.size());
	}

	public static void create(Task t, boolean start) {
		if (schedulers == null)
			return;

		if (t == null)
			return;

		Scheduler s = new Scheduler(t);
		schedulers.put(t, s);
		if (start)
			s.start();
	}

	public static void update(Task t) {
		System.out.println("update");
		if (schedulers == null)
			return;

		if (t == null)
			return;

		Scheduler s = schedulers.get(t);
		if (s == null) {
			System.out.println("s == null");
			// 重新创建,如果修改的是结束时间
			if(t.getEnable()) {
				create(t, true);
			}
		} else {
			if(t.getEnable()) {
				s.stop();
				s.start();
				System.out.println("getEnable = true");
			}else {
				System.out.println("getEnable = false");
				s.stop();
			}
		}
	}

	public static void delete(Task t) {
		if (schedulers == null)
			return;

		if (t == null)
			return;

		Scheduler s = schedulers.remove(t);
		if (s == null) {
			//
		} else {
			s.stop();
		}
	}

	public static void start() {
		if (schedulers == null)
			return;

		Log.info("Strategy start ...");

		for (Scheduler s : schedulers.values()) {
			s.start();
		}

		Log.info("Strategy started");
	}

	public static void stop() {
		if (schedulers == null)
			return;

		Log.info("Strategy stop ...");

		schedulers.clear();

		Log.info("Strategy stopped");
	}

	public static synchronized void destroy() {
		if (schedulers == null)
			return;

		Log.info("Strategy destroy ...");

		schedulers = null;

		Log.info("Strategy destroyed");
	}
}