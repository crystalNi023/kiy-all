package com.kiy.servo.mqtt;

import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.MqttPersistenceException;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.kiy.common.Device;
import com.kiy.common.Types.Model;
import com.kiy.common.Types.Vendor;
import com.kiy.common.devices.ESSwitchES0004;
import com.kiy.common.devices.ESSwitchFourES0003;
import com.kiy.common.devices.ESSwitchTouchTwoES0006;
import com.kiy.common.devices.ESSwitchTwoES0005;
import com.kiy.servo.Config;

/**
 * MQTT数据处理
 * 
 * @author HLX Tel:18996470535
 * @date 2018年6月25日 Copyright:Copyright(c) 2018
 */
public class MQTTCoder {
	/**
	 * 读取数据
	 */
	public static final int READ = 1;
	/**
	 * 解析数据
	 */
	public static final int WRITE = 2;
	

	public static final String BIAS = "/";
	/**
	 * 编辑发布数据
	 * 
	 * @param device
	 * @param action
	 * @throws MqttException 
	 * @throws MqttPersistenceException 
	 */
	public void encode(String GatewayKey,Device device, MQTTServer client, int action) throws MqttPersistenceException, MqttException {
		Vendor vendor = device.getVendor();
		Model model = device.getModel();
		String number = device.getNumber();
		MqttMessage message = new MqttMessage();
		message.setQos(1);
	    message.setRetained(true);
		StringBuilder sb = new StringBuilder();
	    StringBuilder topic = sb.append(Config.MQTT_SUBSCRIPTION_TOPIC).append(GatewayKey).append(BIAS).append(number).append(BIAS).append("command");
	    switch (action) {
			case READ:
				if (vendor==Vendor.EASTSOFT ) {
					switch (model) {
						case ES_0001:
						case ES_0002:{
							String string = "{\"cmd\":\"read\"}"; 
					        message.setPayload(string.getBytes());
							client.publish(client.getTopic(topic.toString()), message);
						}
							break;
						case ES_0003:{
							JsonObject jsonObject = new JsonObject();
							jsonObject.addProperty("deviceKey", number);
							jsonObject.addProperty("cmd", "read");
							JsonObject jsonObject2 = new JsonObject();
							JsonArray jsonArray = new JsonArray();
							JsonObject channel1 = new JsonObject();
							channel1.addProperty("channel", 1);
							channel1.addProperty("switch", true);
							JsonObject channel2 = new JsonObject();
							channel2.addProperty("channel", 2);
							channel2.addProperty("switch", true);
							JsonObject channel3 = new JsonObject();
							channel3.addProperty("channel", 3);
							channel3.addProperty("switch", true);
							JsonObject channel4 = new JsonObject();
							channel4.addProperty("channel", 4);
							channel4.addProperty("switch", true);
							jsonArray.add(channel1);
							jsonArray.add(channel2);
							jsonArray.add(channel3);
							jsonArray.add(channel4);
							jsonObject2.add("channel_collection", jsonArray);
							jsonObject.add("function", jsonObject2);
							message.setPayload(jsonObject.toString().getBytes());
							client.publish(client.getTopic(topic.toString()), message);
						}
							break;
						case ES_0004:{
							JsonObject jsonObject = new JsonObject();
							jsonObject.addProperty("deviceKey", number);
							jsonObject.addProperty("cmd", "read");
							JsonObject jsonObject2 = new JsonObject();
							jsonObject2.addProperty("switch_ch1", true);
							jsonObject.add("function", jsonObject2);
							message.setPayload(jsonObject.toString().getBytes());
							client.publish(client.getTopic(topic.toString()), message);
						}
							break;
						case ES_0005:
						case ES_0006: {
							JsonObject jsonObject = new JsonObject();
							jsonObject.addProperty("deviceKey", number);
							jsonObject.addProperty("cmd", "read");
							JsonObject jsonObject2 = new JsonObject();
							jsonObject2.addProperty("switch_ch1", true);
							jsonObject2.addProperty("switch_ch2", true);
							jsonObject.add("function", jsonObject2);
							message.setPayload(jsonObject.toString().getBytes());
							client.publish(client.getTopic(topic.toString()), message);
						}	
							break;
						default:
							break;
					}
				}
				break;
			case WRITE:
				if (vendor==Vendor.EASTSOFT ) {
					switch (model) {
						case ES_0001:
						case ES_0002:
							break;
						case ES_0003:
						{
							ESSwitchFourES0003 d = (ESSwitchFourES0003) device;
							boolean switchOne = d.isSwitchOne();
							boolean switchTwo = d.isSwitchTwo();
							boolean switchThree = d.isSwitchThree();
							boolean swtichFour = d.isSwtichFour();
 							JsonObject jsonObject = new JsonObject();
							jsonObject.addProperty("deviceKey", number);
							jsonObject.addProperty("cmd", "write");
							JsonObject jsonObject2 = new JsonObject();
							JsonArray jsonArray = new JsonArray();
							JsonObject channel1 = new JsonObject();
							channel1.addProperty("channel", 1);
							channel1.addProperty("switch", switchOne);
							JsonObject channel2 = new JsonObject();
							channel2.addProperty("channel", 2);
							channel2.addProperty("switch", switchTwo);
							JsonObject channel3 = new JsonObject();
							channel3.addProperty("channel", 3);
							channel3.addProperty("switch", switchThree);
							JsonObject channel4 = new JsonObject();
							channel4.addProperty("channel", 4);
							channel4.addProperty("switch", swtichFour);
							jsonArray.add(channel1);
							jsonArray.add(channel2);
							jsonArray.add(channel3);
							jsonArray.add(channel4);
							jsonObject2.add("channel_collection", jsonArray);
							jsonObject.add("function", jsonObject2);
							message.setPayload(jsonObject.toString().getBytes());
							client.publish(client.getTopic(topic.toString()), message);
						}
							break;
						case ES_0004:
						{
							ESSwitchES0004 d = (ESSwitchES0004)device;
							boolean feed = d.isFeed();
							JsonObject jsonObject = new JsonObject();
							jsonObject.addProperty("deviceKey", number);
							jsonObject.addProperty("cmd", "write");
							JsonObject jsonObject2 = new JsonObject();
							jsonObject2.addProperty("switch_ch1", feed);
							jsonObject.add("function", jsonObject2);
							message.setPayload(jsonObject.toString().getBytes());
							client.publish(client.getTopic(topic.toString()), message);
						}
							break;
						case ES_0005:
						{
							ESSwitchTwoES0005 d = (ESSwitchTwoES0005)device;
							boolean switchOne = d.isSwitchOne();
							boolean switchTwo = d.isSwitchTwo();
							JsonObject jsonObject = new JsonObject();
							jsonObject.addProperty("deviceKey", number);
							jsonObject.addProperty("cmd", "write");
							JsonObject jsonObject2 = new JsonObject();
							jsonObject2.addProperty("switch_ch1", switchOne);
							jsonObject2.addProperty("switch_ch2", switchTwo);
							jsonObject.add("function",jsonObject2 );
							message.setPayload(jsonObject.toString().getBytes());
							client.publish(client.getTopic(topic.toString()), message);
						}
							break;
						case ES_0006:
							ESSwitchTouchTwoES0006 d = (ESSwitchTouchTwoES0006)device;
							boolean switchOne = d.isSwitchOne();
							boolean switchTwo = d.isSwitchTwo();
							JsonObject jsonObject = new JsonObject();
							jsonObject.addProperty("deviceKey", number);
							jsonObject.addProperty("cmd", "write");
							JsonObject jsonObject2 = new JsonObject();
							jsonObject2.addProperty("switch_ch1", switchOne);
							jsonObject2.addProperty("switch_ch2", switchTwo);
							jsonObject.add("function",jsonObject2 );
							message.setPayload(jsonObject.toString().getBytes());
							client.publish(client.getTopic(topic.toString()), message);
							break;
						default:
							break;
					}
				}
				break;
			default:
				break;
		}
	}
		
}
