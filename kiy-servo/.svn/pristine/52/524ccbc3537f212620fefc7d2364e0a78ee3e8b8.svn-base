package com.kiy.servo.recognize;

import com.kiy.common.Device;
import com.kiy.common.Types.Kind;
import com.kiy.common.Types.Origin;
import com.kiy.protocol.Messages.Message;
import com.kiy.protocol.Messages.WriteDeviceStatus;
import com.kiy.protocol.Units.MDeviceStatus;
import com.kiy.servo.cloud.Cloud;
import com.kiy.servo.cruise.MessageDevice;
import com.kiy.servo.cruise.MessageDeviceDeque;
import com.kiy.servo.data.Data;
import com.kiy.servo.driver.Driver;
import com.kiy.servo.driver.DriverAdpater;
import com.kiy.servo.master.Master;
import com.kiy.servo.master.MatcherLogon;

/**
 * 语音控制指令
 * 
 * @author HLX Tel:18996470535
 * @date 2018年5月22日 Copyright:Copyright(c) 2018
 */
public class SpeechCommand {

	private SpeechCommand() {
	}

	public static String openDevice(Device device) {
		Kind kind = device.getKind();
		DriverAdpater adpater = Driver.getAdpater(device);
		// 1.控制
		switch (kind) {
			case METER_ELECTRICITY_ONE:
			case METER_GAS:
				device.getFeature(1).setValue(1);
				MessageDeviceDeque.getInstance().add(new MessageDevice(adpater, device, true, true));
				sendSetStatus(device);
				return "正在为您打开"+device.getName();
			case CURTAIN_CONTROLLER:
			case WINDOWS_CONTROLLER:
			case VALVE:	
				device.getFeature(0).setValue(1);
				MessageDeviceDeque.getInstance().add(new MessageDevice(adpater, device, true, true));
				sendSetStatus(device);
				return "正在为您打开"+device.getName();
			case SWITCH:
				device.getFeature(2).setValue(1);
				MessageDeviceDeque.getInstance().add(new MessageDevice(adpater, device, true, true));
				sendSetStatus(device);
				return "正在为您打开"+device.getName();
//			case AIR_CONDITIONER:
//				device.getFeature(1).setValue(0);
//				MessageDeviceDeque.getInstance().add(new MessageDevice(adpater, device, true, true));
//				sendSetStatus(device);
//				return "正在为您打开"+device.getName();
			default:
				break;
		}
	
		return "无法为您打开该设备，检查该设备是否支持开启关闭功能";
	}

	public static String offDevice(Device device) {
		Kind kind = device.getKind();
		DriverAdpater adpater = Driver.getAdpater(device);
		switch (kind) {
			case METER_ELECTRICITY_ONE:
			case METER_GAS:
				device.getFeature(1).setValue(0);
				MessageDeviceDeque.getInstance().add(new MessageDevice(adpater, device, true, true));
				sendSetStatus(device);
				return "正在为您关闭"+device.getName();
			case CURTAIN_CONTROLLER:
			case WINDOWS_CONTROLLER:
			case VALVE:	
				device.getFeature(0).setValue(0);
				MessageDeviceDeque.getInstance().add(new MessageDevice(adpater, device, true, true));
				sendSetStatus(device);
				return "正在为您关闭"+device.getName();
			case SWITCH:
				device.getFeature(2).setValue(0);
				MessageDeviceDeque.getInstance().add(new MessageDevice(adpater, device, true, true));
				sendSetStatus(device);
				return "正在为您关闭"+device.getName();
//			case AIR_CONDITIONER:
//				device.getFeature(1).setValue(1);
//				MessageDeviceDeque.getInstance().add(new MessageDevice(adpater, device, true, true));
//				sendSetStatus(device);
//				return "正在为您打开"+device.getName();
			default:
				break;
		}
		return "无法为您关闭该设备，检查该设备是否支持开启关闭功能";
	}
	public static String queryDevice(Device d){
		Kind kind = d.getKind();
		switch (kind) {
			case :
				
				break;

			default:
				break;
		}
		
		return d.getName()+"当前状态为:"+d.getStatus().name();
	}
	
	/**
	 * 发送控制设备状态消息
	 */
	private static void sendSetStatus(Device d) {
		// 记录日志
		Data.CreateDeviceStatus(d, Origin.USER);

		Message.Builder msg = Message.newBuilder();
		WriteDeviceStatus.Builder wrsb = msg.getWriteDeviceStatusBuilder();
		MDeviceStatus.Builder itemBuilder = wrsb.getItemBuilder();
		
		itemBuilder.setDeviceId(d.getId());
		itemBuilder.setStatus(d.getStatus().getValue());
		itemBuilder.setCreated(d.getTickStatus());
		for (int index = 0; index < d.getFeatureCount(); index++) {
			itemBuilder.putItems(index, d.getFeature(index).getValue());
		}
		// 发送
		wrsb.setItem(itemBuilder);
		Message m = msg.build();
		Cloud.send(m);
		Master.getGroup().writeAndFlush(m, MatcherLogon.Logon);
	}
}
