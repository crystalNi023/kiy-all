/**
 * 2017年6月18日
 */
package com.kiy.servo.driver.rs485;

import io.netty.buffer.ByteBuf;

import com.kiy.common.Device;
import com.kiy.common.Types.Status;
import com.kiy.common.devices.YYAudibleAndVisualAlarm;
import com.kiy.common.devices.YYDoorSensor;
import com.kiy.common.devices.YYPowerSensor;
import com.kiy.common.devices.YYSensorWater;
import com.kiy.common.devices.YYTemperatureMoistureTransmitter;
import com.kiy.servo.driver.Coder;

/**
 * @author Simon(ZhangXi TEL:13883833982)
 *
 */
public final class YYCoder extends Coder {
	/**
	 * 获取状态
	 */
	public static final byte STATUS = 0x03;
	/**
	 * 获取状态-水浸,门磁
	 */
	public static final byte STATUS_WATER_DOOR = 0x02;
	/**
	 * 设置状态
	 */
	public static final byte SET_STATUS = 0x10;

	@Override
	public int getMaxFrame() {
		return 128;
	}

	@Override
	public void encode(Device device, ByteBuf out, byte code, int tag) {
		out.writeByte(Byte.parseByte(device.getNumber()));
		out.writeByte(code);

		switch (device.getKind()) {
			case SENSOR_POWER: {
				// YYPowerSensor dev = (YYPowerSensor) device;
				if (code == STATUS) {
					out.writeShort(3);
					out.writeShort(1);
				}
				break;
			}
			case SENSOR_SWITCHING_OFF: {
				if (code == STATUS_WATER_DOOR) {
					//新版本传感器
					out.writeShort(0); //寄存器地址   
					out.writeShort(1); //寄存器数量
				}
				
				if(code == STATUS){
					//旧版本传感器
					out.writeShort(2);// 设置起始地址为2
					out.writeShort(1);// 设置数据长度为1
				}
				break;
			}
			case SENSOR_SWITCHING_OPEN:{
				if (code == STATUS_WATER_DOOR) {
					//新版本传感器
					out.writeShort(0); //寄存器地址   
					out.writeShort(1); //寄存器数量
				}
				
				if(code == STATUS){
					//旧版本传感器
					out.writeShort(2);// 设置起始地址为2
					out.writeShort(1);// 设置数据长度为1
				}
				break;
			}
			case SENSOR_MOISTURE_TEMPERATURE: {
				if (code == STATUS) {
					out.writeShort(0);// 设置起始位置为0
					out.writeShort(2);// 设置数据长度为2
				}
				break;
			}
			case SENSOR_SMOKE: {
				if (code == STATUS) {
					out.writeShort(3);// 设置起始位置为3
					out.writeShort(1);// 设置数据长度为1
				}
				break;
			}
			case AUDIBLE_VISUAL_ALARM: {
				if (code == STATUS) {
					out.writeShort(0x001A);
					out.writeShort(1);
				}
				if (code == SET_STATUS) {
					YYAudibleAndVisualAlarm dev = (YYAudibleAndVisualAlarm) device;
					out.writeShort(0x001A);
					out.writeShort(1);
					boolean beepOne = dev.isBeep();
					boolean light = dev.isLight();
					if (beepOne && light) {
						out.writeByte(1);
					} else if (beepOne == true && light == false) {
						out.writeByte(3);
					} else if (beepOne == false && light == true) {
						out.writeByte(2);
					} else {
						out.writeByte(0);
					}

				}
				break;
			}
			default:
				break;
		}
		CRC.write(out);
	}

	@Override
	public int frame(Device device, ByteBuf in) {
		
		// 已收到字节总数
		int readable = in.readableBytes();

		if (readable < 5)
			return Coder.CONTINUE;

		if (readable > 128) {
			device.setStatus(Status.C_OVERFLOW);
			return Coder.OVERFLOW;
		}

		// 协议字节数
		short length = in.getUnsignedByte(2);

		if (length + 5 > readable)
			return Coder.CONTINUE;
		else
			length += 5;

		return Coder.OK;
	}

	@Override
	public void decode(Device device, ByteBuf in, byte code, int tag) {
		if (in.readableBytes() == 0) {
			System.out.println("readableBytes == 0,连接超时");
			device.setStatus(Status.C_TIMEOUT);
			return;
		}

		// 地址 B1
		if (!device.getNumber().equals(Byte.toString(in.readByte()))) {
			device.setStatus(Status.C_ADDRESS);
			return;
		}

		// 代码 B1
		if (code != in.readByte()) {
			device.setStatus(Status.C_COMMAND);
			return;
		}

		// 复位正常
		device.setStatus(Status.NONE);

		// 长度 B1
		in.readByte();

		switch (device.getKind()) {
			case SENSOR_POWER: {
				if (code == STATUS) {
					YYPowerSensor dev = (YYPowerSensor) device;
					// 状态 0000通/0001断
					if(in.readShort()==1){
						//断开
						dev.setFeed(true);
					}else{
						//接通
						dev.setFeed(false);
					}
				}
				break;
			}
			case SENSOR_SWITCHING_OFF: {
				if	(code == STATUS){
					YYDoorSensor dev = (YYDoorSensor) device;
					//旧版本传感器
					// 状态0001正常/0002报警
					short readShort = in.readShort();
					if (readShort == 1) {
						dev.setFeed(false);
					} else if (readShort == 2) {
						dev.setFeed(true);
					}
				}
				
				if (code == STATUS_WATER_DOOR) {
					YYDoorSensor dev = (YYDoorSensor) device;
					//新版本传感器
					byte readByte = in.readByte();
					if(readByte == 1){
						dev.setFeed(true);
					}else{
						dev.setFeed(false);
					}
				}
				break;
			}
			case SENSOR_SWITCHING_OPEN:{
				if	(code == STATUS){
					YYSensorWater dev = (YYSensorWater) device;
					//旧版本传感器
					// 状态0001正常/0002报警
					short readShort = in.readShort();
					if (readShort == 1) {
						dev.setFeed(false);
					} else if (readShort == 2) {
						dev.setFeed(true);
					}
				}
				
				if (code == STATUS_WATER_DOOR) {
					YYSensorWater dev = (YYSensorWater) device;
					//新版本传感器
					byte readByte = in.readByte();
					if(readByte == 1){
						dev.setFeed(true);
					}else{
						dev.setFeed(false);
					}
				}
				break;
			}
			case SENSOR_MOISTURE_TEMPERATURE: {
				if (code == STATUS) {
					YYTemperatureMoistureTransmitter dev = (YYTemperatureMoistureTransmitter) device;
					dev.setMoisture((float) (in.readShort() / 10.0));
					dev.setTemperature((float) (in.readShort() / 10.0));
				}
				break;
			}
			case AUDIBLE_VISUAL_ALARM: {
				if (code == STATUS) {
					
				} else if (code == SET_STATUS) {
					YYAudibleAndVisualAlarm dev = (YYAudibleAndVisualAlarm) device;
					// 状态01为开/00为关
					// dev.setFeed(!(in.readByte() == 0));
					byte readByte = in.readByte();
					if (readByte == 0) {
						dev.setBeep(false);
						dev.setLight(false);
					} else if (readByte == 1) {
						dev.setBeep(true);
						dev.setLight(true);
					} else if (readByte == 2) {
						dev.setBeep(false);
						dev.setLight(true);
					} else if (readByte == 3) {
						dev.setBeep(true);
						dev.setLight(false);
					}
				}
				break;
			}
			default:
				break;
		}
		// CRC16
		in.skipBytes(2);
	}
}